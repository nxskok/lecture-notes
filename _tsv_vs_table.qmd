---
title: "read_tsv vs read_table"
format: 
  html:
    df-print: paged
---

The files below are my original tab-separated Australian athletes data (`ais.txt`) and a modified version in which the sport Netball is spelled as Net ball (with a space in the middle that is supposed to be part of the sport name rather than being a separator), in `ais2.txt`. How do `read_tsv` and `read_table` read them in?

```{r}
library(tidyverse)
my1 <- "http://ritsokiguess.site/datafiles/ais.txt"
my2 <- "http://ritsokiguess.site/datafiles/ais2.txt"
```

On the original data:

```{r}
read_tsv(my1)
read_table(my1)
```

These both work, because the data values are separated by whitespace (tab counting as whitespace).

On the modified data:

```{r}
read_tsv(my2)
```

This works and correctly puts the space in the middle of the sport "Net ball". But this doesn't:

```{r}
read_table(my2)
```

It doesn't give an error, but the "parsing failures" are for the rows with "Net ball" as a sport, which has been split over two columns and now there are too many columns in these rows (14 instead of 13). If you scroll down, you see that the columns have gotten misaligned. Assuming that `read_table` has worked correctly in this case will be very wrong.

So the moral of the story is: if you know your data values are separated by tabs *and there is no other whitespace inside the file*, either `read_tsv` or `read_table` will work. But if the data values are separated by tabs *and there is other whitespace in the file that does not separate data values*, things can go wrong. (If some of my data values had been separated by tabs and some by spaces, with `Netball` written without a space, then `read_table` would have been the only thing that would work.)

By the way, the reason that tab-separated values are a thing is if you open a spreadsheet and then copy-paste cells from it into a data file, they end up separated by tabs, for the good reason that your spreadsheet cells could easily have spaces or other whitespace in them, but they are unlikely to have tabs *inside* them.
