{
  "hash": "18e06a7ad38492960e05889aaf0fd7b4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"When pivot-wider goes wrong\"\n---\n\n\n\n\n## Packages\n\nThe inevitable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Some long data that should be wide\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"obs\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"time\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"y\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"pre\",\"3\":\"19\"},{\"1\":\"2\",\"2\":\"post\",\"3\":\"18\"},{\"1\":\"3\",\"2\":\"pre\",\"3\":\"17\"},{\"1\":\"4\",\"2\":\"post\",\"3\":\"16\"},{\"1\":\"5\",\"2\":\"pre\",\"3\":\"15\"},{\"1\":\"6\",\"2\":\"post\",\"3\":\"14\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   Six observations of variable `y`, but three measured before some\n    treatment and three measured after.\n-   Really matched pairs, so want column of `y`-values for `pre` and for\n    `post`.\n-   `pivot_wider`.\n\n## What happens here?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% pivot_wider(names_from = time, values_from = y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"obs\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pre\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"post\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"19\",\"3\":\"NA\"},{\"1\":\"2\",\"2\":\"NA\",\"3\":\"18\"},{\"1\":\"3\",\"2\":\"17\",\"3\":\"NA\"},{\"1\":\"4\",\"2\":\"NA\",\"3\":\"16\"},{\"1\":\"5\",\"2\":\"15\",\"3\":\"NA\"},{\"1\":\"6\",\"2\":\"NA\",\"3\":\"14\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   Should be *three* `pre` values and *three* `post`. Why did this\n    happen?\n-   `pivot_wider` needs to know which *row* to put each observation in.\n-   Uses combo of columns *not* named in `pivot_wider`, here `obs`\n    (only).\n\n## The problem\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% pivot_wider(names_from = time, values_from = y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"obs\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pre\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"post\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"19\",\"3\":\"NA\"},{\"1\":\"2\",\"2\":\"NA\",\"3\":\"18\"},{\"1\":\"3\",\"2\":\"17\",\"3\":\"NA\"},{\"1\":\"4\",\"2\":\"NA\",\"3\":\"16\"},{\"1\":\"5\",\"2\":\"15\",\"3\":\"NA\"},{\"1\":\"6\",\"2\":\"NA\",\"3\":\"14\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   There are 6 different `obs` values, so 6 different rows.\n-   No data for `obs` 2 and `pre`, so that cell missing (`NA`).\n-   Not enough data (6 obs) to fill 12 ($= 2 \\times 6$) cells.\n-   `obs` needs to say which subject provided which *2* observations.\n\n## Fixing it up\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd2\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"subject\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"time\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"y\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"pre\",\"3\":\"19\"},{\"1\":\"1\",\"2\":\"post\",\"3\":\"18\"},{\"1\":\"2\",\"2\":\"pre\",\"3\":\"17\"},{\"1\":\"2\",\"2\":\"post\",\"3\":\"16\"},{\"1\":\"3\",\"2\":\"pre\",\"3\":\"15\"},{\"1\":\"3\",\"2\":\"post\",\"3\":\"14\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n-   column `subject` shows which subject provided each `pre` and `post`.\n-   when we do `pivot_wider`, now only *3* rows, one per subject.\n\n## Coming out right\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 %>% pivot_wider(names_from = time, values_from = y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"subject\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pre\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"post\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"19\",\"3\":\"18\"},{\"1\":\"2\",\"2\":\"17\",\"3\":\"16\"},{\"1\":\"3\",\"2\":\"15\",\"3\":\"14\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   row each observation goes to determined by other column `subject`,\n    and now a `pre` and `post` for each `subject`.\n-   right layout for matched pairs $t$ or to make differences for sign\n    test or normal quantile plot.\n\n\n## Another example\n\n-   Two independent samples this time\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"y\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"control\",\"2\":\"8\"},{\"1\":\"control\",\"2\":\"11\"},{\"1\":\"control\",\"2\":\"13\"},{\"1\":\"control\",\"2\":\"14\"},{\"1\":\"treatment\",\"2\":\"12\"},{\"1\":\"treatment\",\"2\":\"15\"},{\"1\":\"treatment\",\"2\":\"16\"},{\"1\":\"treatment\",\"2\":\"17\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   These should be arranged like this\n-   but what if we make them wider?\n\n## Wider\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 %>% pivot_wider(names_from = group, values_from = y)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"control\"],\"name\":[1],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"treatment\"],\"name\":[2],\"type\":[\"list\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"<dbl [4]>\",\"2\":\"<dbl [4]>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   row determined by what not used for `pivot_wider`: nothing!\n-   everything smooshed into *one* row!\n-   this time, too *much* data for the layout.\n-   Four data values squeezed into each of the two cells:\n    \"list-columns\".\n\n## Get the data out\n\n-   To expand list-columns out into the data values they contain, can\n    use `unnest`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd3 %>% pivot_wider(names_from = group, values_from = y) %>% \n  unnest(c(control, treatment))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"control\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"treatment\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"8\",\"2\":\"12\"},{\"1\":\"11\",\"2\":\"15\"},{\"1\":\"13\",\"2\":\"16\"},{\"1\":\"14\",\"2\":\"17\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-   in this case, wrong layout, because data values not paired.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"wider_wrong_files/libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"wider_wrong_files/libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}