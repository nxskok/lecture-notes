{
  "hash": "97c9378c9cfec7e33920ad51ea5efce4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidying data: extras\"\n---\n\n\n\n\n## Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## The pig feed data again\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/pigs1.txt\"\npigs <- read_table(my_url)\npigs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n    pig feed1 feed2 feed3 feed4\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1  60.8  68.7  92.6  87.9\n2     2  57    67.7  92.1  84.2\n3     3  65    74    90.2  83.1\n4     4  58.6  66.3  96.5  85.7\n5     5  61.7  69.8  99.1  90.3\n```\n\n\n:::\n:::\n\n\n\n\n## Make longer (as before)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs %>% pivot_longer(-pig, names_to=\"feed\", \n                      values_to=\"weight\") -> pigs_longer\npigs_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 x 3\n     pig feed  weight\n   <dbl> <chr>  <dbl>\n 1     1 feed1   60.8\n 2     1 feed2   68.7\n 3     1 feed3   92.6\n 4     1 feed4   87.9\n 5     2 feed1   57  \n 6     2 feed2   67.7\n 7     2 feed3   92.1\n 8     2 feed4   84.2\n 9     3 feed1   65  \n10     3 feed2   74  \n11     3 feed3   90.2\n12     3 feed4   83.1\n13     4 feed1   58.6\n14     4 feed2   66.3\n15     4 feed3   96.5\n16     4 feed4   85.7\n17     5 feed1   61.7\n18     5 feed2   69.8\n19     5 feed3   99.1\n20     5 feed4   90.3\n```\n\n\n:::\n:::\n\n\n\n\n## Make wider two ways 1/2\n\n`pivot_wider` is inverse of `pivot_longer`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  pivot_wider(names_from=feed, values_from=weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 x 5\n    pig feed1 feed2 feed3 feed4\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1  60.8  68.7  92.6  87.9\n2     2  57    67.7  92.1  84.2\n3     3  65    74    90.2  83.1\n4     4  58.6  66.3  96.5  85.7\n5     5  61.7  69.8  99.1  90.3\n```\n\n\n:::\n:::\n\n\n\n\nwe are back where we started.\n\n## Make wider 2/2\n\nOr\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  pivot_wider(names_from=pig, values_from=weight)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 6\n  feed    `1`   `2`   `3`   `4`   `5`\n  <chr> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 feed1  60.8  57    65    58.6  61.7\n2 feed2  68.7  67.7  74    66.3  69.8\n3 feed3  92.6  92.1  90.2  96.5  99.1\n4 feed4  87.9  84.2  83.1  85.7  90.3\n```\n\n\n:::\n:::\n\n\n\n\n## Disease presence and absence at two locations\n\nFrequencies of plants observed with and without disease at two\nlocations:\n\n```         \nSpecies     Disease present         Disease absent\n       Location X Location Y  Location X Location Y\nA            44         12          38        10\nB            28         22          20        18\n```\n\nThis has two rows of headers, so I rewrote the data file:\n\n```         \nSpecies  present_x present_y    absent_x  absent_y\nA            44         12          38        10\nB            28         22          20        18\n```\n\n## Read in\n\n... into data frame called `prevalence`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/STAC32/disease.txt\"\nprevalence <- read_table(my_url)\nprevalence\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 5\n  Species present_x present_y absent_x absent_y\n  <chr>       <dbl>     <dbl>    <dbl>    <dbl>\n1 A              44        12       38       10\n2 B              28        22       20       18\n```\n\n\n:::\n:::\n\n\n\n\n## Lengthen and separate\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprevalence %>% \n  pivot_longer(-Species, names_to = \"column\", \n               values_to = \"freq\") %>% \n  separate_wider_delim(column, \"_\", \n                       names = c(\"disease\", \"location\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 4\n  Species disease location  freq\n  <chr>   <chr>   <chr>    <dbl>\n1 A       present x           44\n2 A       present y           12\n3 A       absent  x           38\n4 A       absent  y           10\n5 B       present x           28\n6 B       present y           22\n7 B       absent  x           20\n8 B       absent  y           18\n```\n\n\n:::\n:::\n\n\n\n\n## Making longer, the better way\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprevalence %>% \n  pivot_longer(-Species, names_to=c(\"disease\", \"location\"),\n               names_sep=\"_\", \n               values_to=\"frequency\") -> prevalence_longer \nprevalence_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 4\n  Species disease location frequency\n  <chr>   <chr>   <chr>        <dbl>\n1 A       present x               44\n2 A       present y               12\n3 A       absent  x               38\n4 A       absent  y               10\n5 B       present x               28\n6 B       present y               22\n7 B       absent  x               20\n8 B       absent  y               18\n```\n\n\n:::\n:::\n\n\n\n\n## Making wider, different ways 1/2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprevalence_longer %>% \n  pivot_wider(names_from=c(Species, location), \n              values_from=frequency)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 5\n  disease   A_x   A_y   B_x   B_y\n  <chr>   <dbl> <dbl> <dbl> <dbl>\n1 present    44    12    28    22\n2 absent     38    10    20    18\n```\n\n\n:::\n:::\n\n\n\n\n## Making wider, different ways 2/2\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprevalence_longer %>% \n  pivot_wider(names_from=location, values_from=frequency)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 4\n  Species disease     x     y\n  <chr>   <chr>   <dbl> <dbl>\n1 A       present    44    12\n2 A       absent     38    10\n3 B       present    28    22\n4 B       absent     20    18\n```\n\n\n:::\n:::\n\n\n\n\n## Interlude\n\nPigs data again:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  group_by(feed) %>% \n  summarize(weight_mean=mean(weight))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 2\n  feed  weight_mean\n  <chr>       <dbl>\n1 feed1        60.6\n2 feed2        69.3\n3 feed3        94.1\n4 feed4        86.2\n```\n\n\n:::\n:::\n\n\n\n\n## What if summary is more than one number?\n\neg. quartiles:\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  group_by(feed) %>% \n  summarize(r=quantile(weight, c(0.25, 0.75)))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\ni Please use `reframe()` instead.\ni When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'feed'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 2\n# Groups:   feed [4]\n  feed      r\n  <chr> <dbl>\n1 feed1  58.6\n2 feed1  61.7\n3 feed2  67.7\n4 feed2  69.8\n5 feed3  92.1\n6 feed3  96.5\n7 feed4  84.2\n8 feed4  87.9\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Following the hint (gives no warning)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  group_by(feed) %>% \n  reframe(r=quantile(weight, c(0.25, 0.75)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 2\n  feed      r\n  <chr> <dbl>\n1 feed1  58.6\n2 feed1  61.7\n3 feed2  67.7\n4 feed2  69.8\n5 feed3  92.1\n6 feed3  96.5\n7 feed4  84.2\n8 feed4  87.9\n```\n\n\n:::\n:::\n\n\n\n\n## this also works\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  group_by(feed) %>% \n  summarize(r=list(quantile(weight, c(0.25, 0.75)))) %>% \n  unnest(r)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 2\n  feed      r\n  <chr> <dbl>\n1 feed1  58.6\n2 feed1  61.7\n3 feed2  67.7\n4 feed2  69.8\n5 feed3  92.1\n6 feed3  96.5\n7 feed4  84.2\n8 feed4  87.9\n```\n\n\n:::\n:::\n\n\n\n\n## Or, even better, use `enframe`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(pigs_longer$weight, c(0.25, 0.75))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   25%    75% \n65.975 90.225 \n```\n\n\n:::\n\n```{.r .cell-code}\nenframe(quantile(pigs_longer$weight, c(0.25, 0.75)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 2\n  name  value\n  <chr> <dbl>\n1 25%    66.0\n2 75%    90.2\n```\n\n\n:::\n:::\n\n\n\n\n## A nice look\n\nRun this one line at a time to see how it works:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npigs_longer %>% \n  group_by(feed) %>% \n  summarize(r=list(enframe(quantile(weight, c(0.25, 0.75))))) %>% \n  unnest(r) %>% \n  pivot_wider(names_from=name, values_from=value) -> d\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 3\n  feed  `25%` `75%`\n  <chr> <dbl> <dbl>\n1 feed1  58.6  61.7\n2 feed2  67.7  69.8\n3 feed3  92.1  96.5\n4 feed4  84.2  87.9\n```\n\n\n:::\n:::\n\n\n\n\n## A hairy one\n\n18 people receive one of three treatments. At 3 different times (pre,\npost, followup) two variables `y` and `z` are measured on each person:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/STAC32/repmes.txt\"\nrepmes0 <- read_table(my_url)\nrepmes0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 x 8\n   treatment   rep pre_y post_y  fu_y pre_z post_z  fu_z\n   <chr>     <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl>\n 1 A             1     3     13     9     0      0     9\n 2 A             2     0     14    10     6      6     3\n 3 A             3     4      6    17     8      2     6\n 4 A             4     7      7    13     7      6     4\n 5 A             5     3     12    11     6     12     6\n 6 A             6    10     14     8    13      3     8\n 7 B             1     9     11    17     8     11    27\n 8 B             2     4     16    13     9      3    26\n 9 B             3     8     10     9    12      0    18\n10 B             4     5      9    13     3      0    14\n11 B             5     0     15    11     3      0    25\n12 B             6     4     11    14     4      2     9\n13 Control       1    10     12    15     4      3     7\n14 Control       2     2      8    12     8      7    20\n15 Control       3     4      9    10     2      0    10\n16 Control       4    10      8     8     5      8    14\n17 Control       5    11     11    11     1      0    11\n18 Control       6     1      5    15     8      9    10\n```\n\n\n:::\n:::\n\n\n\n\n## Create unique ids\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepmes0 %>% mutate(id=str_c(treatment, \".\", rep)) %>% \n  select(-rep) %>% \n  select(id, everything()) -> repmes\nrepmes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 x 8\n   id        treatment pre_y post_y  fu_y pre_z post_z  fu_z\n   <chr>     <chr>     <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl>\n 1 A.1       A             3     13     9     0      0     9\n 2 A.2       A             0     14    10     6      6     3\n 3 A.3       A             4      6    17     8      2     6\n 4 A.4       A             7      7    13     7      6     4\n 5 A.5       A             3     12    11     6     12     6\n 6 A.6       A            10     14     8    13      3     8\n 7 B.1       B             9     11    17     8     11    27\n 8 B.2       B             4     16    13     9      3    26\n 9 B.3       B             8     10     9    12      0    18\n10 B.4       B             5      9    13     3      0    14\n11 B.5       B             0     15    11     3      0    25\n12 B.6       B             4     11    14     4      2     9\n13 Control.1 Control      10     12    15     4      3     7\n14 Control.2 Control       2      8    12     8      7    20\n15 Control.3 Control       4      9    10     2      0    10\n16 Control.4 Control      10      8     8     5      8    14\n17 Control.5 Control      11     11    11     1      0    11\n18 Control.6 Control       1      5    15     8      9    10\n```\n\n\n:::\n:::\n\n\n\n\n## Attempt 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepmes %>% pivot_longer(contains(\"_\"),\n                        names_to=c(\"time\", \"var\"),\n                        names_sep=\"_\",\n                        values_to = \"vvv\"\n                         )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 108 x 5\n   id    treatment time  var     vvv\n   <chr> <chr>     <chr> <chr> <dbl>\n 1 A.1   A         pre   y         3\n 2 A.1   A         post  y        13\n 3 A.1   A         fu    y         9\n 4 A.1   A         pre   z         0\n 5 A.1   A         post  z         0\n 6 A.1   A         fu    z         9\n 7 A.2   A         pre   y         0\n 8 A.2   A         post  y        14\n 9 A.2   A         fu    y        10\n10 A.2   A         pre   z         6\n# i 98 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Comment\n\nThis is *too* long! We wanted a column called `y` and a column called\n`z`, but they have been pivoted-longer too.\n\n## Attempt 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepmes %>% pivot_longer(contains(\"_\"),\n                        names_to=c(\"time\", \".value\"),\n                        names_sep=\"_\"\n                        ) -> repmes3\nrepmes3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 54 x 5\n   id    treatment time      y     z\n   <chr> <chr>     <chr> <dbl> <dbl>\n 1 A.1   A         pre       3     0\n 2 A.1   A         post     13     0\n 3 A.1   A         fu        9     9\n 4 A.2   A         pre       0     6\n 5 A.2   A         post     14     6\n 6 A.2   A         fu       10     3\n 7 A.3   A         pre       4     8\n 8 A.3   A         post      6     2\n 9 A.3   A         fu       17     6\n10 A.4   A         pre       7     7\n# i 44 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Comment\n\nThis has done what we wanted.\n\n## Make a graph\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(repmes3, aes(x=fct_inorder(time), y=y, \n                    colour=treatment, group = id)) +\n  geom_point() + geom_line()\n```\n\n::: {.cell-output-display}\n![](tidy_extra_files/figure-beamer/tidy-extra-R-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Comment\n\n- A so-called \"spaghetti plot\": \n  - The three measurements for each person are\njoined by lines\n  - The lines are coloured by treatment.\n\n## Or do the plot with means\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrepmes3 %>% group_by(treatment, ftime=fct_inorder(time)) %>% \n  summarize(mean_y=mean(y)) %>% \n  ggplot(aes(x=ftime, y=mean_y, colour=treatment, \n             group=treatment)) + \n    geom_point() + geom_line()\n```\n\n::: {.cell-output-display}\n![](tidy_extra_files/figure-beamer/tidy-extra-R-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Comment\n\n- On average, the two real treatments go up and level off\n- but the control\ngroup is very different.\n",
    "supporting": [
      "tidy_extra_files/figure-beamer"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}