{
  "hash": "30d690b485dec82d5750e7b97b0828e9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Choosing things in dataframes\"\n---\n\n\n\n\n## Packages\n\nThe usual:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Doing things with data frames\n\nLet's go back to our Australian athletes: \n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 female Netb~  4.56  13.3  42.2  13.6    20  19.2  49      11.3\n 2 female Netb~  4.15   6    38    12.7    59  21.2 110.     25.3\n 3 female Netb~  4.16   7.6  37.5  12.3    22  21.4  89      19.4\n 4 female Netb~  4.32   6.4  37.7  12.3    30  21.0  98.3    19.6\n 5 female Netb~  4.06   5.8  38.7  12.8    78  21.8 122.     23.1\n 6 female Netb~  4.12   6.1  36.6  11.8    21  21.4  90.4    16.9\n 7 female Netb~  4.17   5    37.4  12.7   109  21.5 107.     21.3\n 8 female Netb~  3.8    6.6  36.5  12.4   102  24.4 157.     26.6\n 9 female Netb~  3.96   5.5  36.3  12.4    71  22.6 101.     17.9\n10 female Netb~  4.44   9.7  41.4  14.1    64  22.8 126.     25.0\n# i 192 more rows\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Choosing a column\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(Sport)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 1\n   Sport  \n   <chr>  \n 1 Netball\n 2 Netball\n 3 Netball\n 4 Netball\n 5 Netball\n 6 Netball\n 7 Netball\n 8 Netball\n 9 Netball\n10 Netball\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Choosing several columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(Sport, Hg, BMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 3\n   Sport      Hg   BMI\n   <chr>   <dbl> <dbl>\n 1 Netball  13.6  19.2\n 2 Netball  12.7  21.2\n 3 Netball  12.3  21.4\n 4 Netball  12.3  21.0\n 5 Netball  12.8  21.8\n 6 Netball  11.8  21.4\n 7 Netball  12.7  21.5\n 8 Netball  12.4  24.4\n 9 Netball  12.4  22.6\n10 Netball  14.1  22.8\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Choosing consecutive columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(Sex:WCC, BMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 5\n   Sex    Sport     RCC   WCC   BMI\n   <chr>  <chr>   <dbl> <dbl> <dbl>\n 1 female Netball  4.56  13.3  19.2\n 2 female Netball  4.15   6    21.2\n 3 female Netball  4.16   7.6  21.4\n 4 female Netball  4.32   6.4  21.0\n 5 female Netball  4.06   5.8  21.8\n 6 female Netball  4.12   6.1  21.4\n 7 female Netball  4.17   5    21.5\n 8 female Netball  3.8    6.6  24.4\n 9 female Netball  3.96   5.5  22.6\n10 female Netball  4.44   9.7  22.8\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Choosing all-but some columns \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(-(RCC:LBM))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 4\n   Sex    Sport      Ht    Wt\n   <chr>  <chr>   <dbl> <dbl>\n 1 female Netball  177.  59.9\n 2 female Netball  173.  63  \n 3 female Netball  176   66.3\n 4 female Netball  170.  60.7\n 5 female Netball  183   72.9\n 6 female Netball  178.  67.9\n 7 female Netball  177.  67.5\n 8 female Netball  174.  74.1\n 9 female Netball  174.  68.2\n10 female Netball  174.  68.8\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Select-helpers\n\nOther ways to select columns: those whose name:\n\n-   `starts_with` something\n-   `ends_with` something\n-   `contains` something\n-   `matches` a \"regular expression\"\n-   `everything()` select all the columns\n\n## Columns whose names begin with S\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(starts_with(\"S\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 3\n   Sex    Sport     SSF\n   <chr>  <chr>   <dbl>\n 1 female Netball  49  \n 2 female Netball 110. \n 3 female Netball  89  \n 4 female Netball  98.3\n 5 female Netball 122. \n 6 female Netball  90.4\n 7 female Netball 107. \n 8 female Netball 157. \n 9 female Netball 101. \n10 female Netball 126. \n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Columns whose names end with C\n\neither uppercase or lowercase:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(ends_with(\"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 3\n     RCC   WCC    Hc\n   <dbl> <dbl> <dbl>\n 1  4.56  13.3  42.2\n 2  4.15   6    38  \n 3  4.16   7.6  37.5\n 4  4.32   6.4  37.7\n 5  4.06   5.8  38.7\n 6  4.12   6.1  36.6\n 7  4.17   5    37.4\n 8  3.8    6.6  36.5\n 9  3.96   5.5  36.3\n10  4.44   9.7  41.4\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Case-sensitive\n\nThis works with any of the select-helpers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(ends_with(\"C\", ignore.case=FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 2\n     RCC   WCC\n   <dbl> <dbl>\n 1  4.56  13.3\n 2  4.15   6  \n 3  4.16   7.6\n 4  4.32   6.4\n 5  4.06   5.8\n 6  4.12   6.1\n 7  4.17   5  \n 8  3.8    6.6\n 9  3.96   5.5\n10  4.44   9.7\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Column names containing letter R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(contains(\"r\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 3\n   Sport     RCC  Ferr\n   <chr>   <dbl> <dbl>\n 1 Netball  4.56    20\n 2 Netball  4.15    59\n 3 Netball  4.16    22\n 4 Netball  4.32    30\n 5 Netball  4.06    78\n 6 Netball  4.12    21\n 7 Netball  4.17   109\n 8 Netball  3.8    102\n 9 Netball  3.96    71\n10 Netball  4.44    64\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Exactly two characters, ending with T\n\nIn regular expression terms, this is `^.t$`:\n\n-   `^` means \"start of text\"\n-   `.` means \"exactly one character, but could be anything\"\n-   `t` means a literal letter t (uppercase or lowercase)\n-   `$` means \"end of text\".\n\n## Matching a regular expression\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(matches(\"^.t$\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 2\n      Ht    Wt\n   <dbl> <dbl>\n 1  177.  59.9\n 2  173.  63  \n 3  176   66.3\n 4  170.  60.7\n 5  183   72.9\n 6  178.  67.9\n 7  177.  67.5\n 8  174.  74.1\n 9  174.  68.2\n10  174.  68.8\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Choosing columns by property\n\n-   Use `where` as with summarizing several columns\n-   eg, to choose text columns:\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% select(where(is.character))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 2\n   Sex    Sport  \n   <chr>  <chr>  \n 1 female Netball\n 2 female Netball\n 3 female Netball\n 4 female Netball\n 5 female Netball\n 6 female Netball\n 7 female Netball\n 8 female Netball\n 9 female Netball\n10 female Netball\n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Choosing rows by number\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% slice(16:25)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 female Netb~  4.25  10.7  39.5  13.2   127  24.5 157.     26.5\n 2 female Netb~  4.46  10.9  39.7  13.7   102  24.0 116.     23.0\n 3 female Netb~  4.4    9.3  40.4  13.6    86  26.2 182.     30.1\n 4 female Netb~  4.83   8.4  41.8  13.4    40  20.0  71.6    13.9\n 5 female Netb~  4.23   6.9  38.3  12.6    50  25.7 144.     26.6\n 6 female Netb~  4.24   8.4  37.6  12.5    58  25.6 201.     35.5\n 7 female Netb~  3.95   6.6  38.4  12.8    33  19.9  68.9    15.6\n 8 female Netb~  4.03   8.5  37.7  13      51  23.4 104.     19.6\n 9 female BBall  3.96   7.5  37.5  12.3    60  20.6 109.     19.8\n10 female BBall  4.41   8.3  38.2  12.7    68  20.7 103.     21.3\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Non-consecutive rows \n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% \n  slice(10, 13, 17, 42)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 13\n  Sex    Sport    RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n  <chr>  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 female Netba~  4.44   9.7  41.4  14.1    64  22.8  126.    25.0\n2 female Netba~  4.02   9.1  37.7  12.7   107  23.0   77     18.1\n3 female Netba~  4.46  10.9  39.7  13.7   102  24.0  116.    23.0\n4 female Row     4.37   8.1  41.8  14.3    53  23.5   98     21.8\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## A random sample of rows\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% slice_sample(n=8)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 x 13\n  Sex    Sport    RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n  <chr>  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 male   TSprnt  5.59   7.9  49.7  17.2   220  23.6  41.9    8.94\n2 male   BBall   4.87   7.4  43.5  15      49  22.4  43.8    7.88\n3 female Netba~  4.15   6    38    12.7    59  21.2 110.    25.3 \n4 female Netba~  4.4    9.3  40.4  13.6    86  26.2 182.    30.1 \n5 female BBall   4.42   5.7  39.9  13.2    44  20.6  97.9   22.4 \n6 male   Row     4.95   5.9  45.4  15.5   125  23.8  34.8    6.96\n7 male   Row     4.87   8.2  43.8  15     130  23.6  49.2    9   \n8 male   Tennis  4.97   8.8  43    14.9   233  22.3  60.4   11.5 \n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Rows for which something is true\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% filter(Sport == \"Tennis\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 female Tenn~  4      4.2  36.6  12      57  25.4 109     20.9 \n 2 female Tenn~  4.4    4    40.8  13.9    73  22.1  98.1   19.6 \n 3 female Tenn~  4.38   7.9  39.8  13.5    88  21.2  80.6   17.1 \n 4 female Tenn~  4.08   6.6  37.8  12.1   182  20.5  68.3   15.3 \n 5 female Tenn~  4.98   6.4  44.8  14.8    80  17.1  47.6   11.1 \n 6 female Tenn~  5.16   7.2  44.3  14.5    88  18.3  61.9   12.9 \n 7 female Tenn~  4.66   6.4  40.9  13.9   109  18.4  38.2    8.45\n 8 male   Tenn~  5.66   8.3  50.2  17.7    38  23.8  56.5   10.0 \n 9 male   Tenn~  5.03   6.4  42.7  14.3   122  22.0  47.6    8.51\n10 male   Tenn~  4.97   8.8  43    14.9   233  22.3  60.4   11.5 \n11 male   Tenn~  5.38   6.3  46    15.7    32  21.1  34.9    6.26\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## More complicated selections\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% filter(Sport == \"Tennis\", RCC < 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 13\n  Sex    Sport    RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n  <chr>  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 female Tennis  4      4.2  36.6  12      57  25.4 109     20.9 \n2 female Tennis  4.4    4    40.8  13.9    73  22.1  98.1   19.6 \n3 female Tennis  4.38   7.9  39.8  13.5    88  21.2  80.6   17.1 \n4 female Tennis  4.08   6.6  37.8  12.1   182  20.5  68.3   15.3 \n5 female Tennis  4.98   6.4  44.8  14.8    80  17.1  47.6   11.1 \n6 female Tennis  4.66   6.4  40.9  13.9   109  18.4  38.2    8.45\n7 male   Tennis  4.97   8.8  43    14.9   233  22.3  60.4   11.5 \n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Another way to do \"and\"\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% filter(Sport == \"Tennis\") %>% \n  filter(RCC < 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 13\n  Sex    Sport    RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n  <chr>  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n1 female Tennis  4      4.2  36.6  12      57  25.4 109     20.9 \n2 female Tennis  4.4    4    40.8  13.9    73  22.1  98.1   19.6 \n3 female Tennis  4.38   7.9  39.8  13.5    88  21.2  80.6   17.1 \n4 female Tennis  4.08   6.6  37.8  12.1   182  20.5  68.3   15.3 \n5 female Tennis  4.98   6.4  44.8  14.8    80  17.1  47.6   11.1 \n6 female Tennis  4.66   6.4  40.9  13.9   109  18.4  38.2    8.45\n7 male   Tennis  4.97   8.8  43    14.9   233  22.3  60.4   11.5 \n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Either/Or\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% filter(Sport == \"Tennis\" | RCC > 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 66 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 female Row    5.02   6.4  44.8  15.2    48  19.8  91      19.2\n 2 female T400m  5.31   9.5  47.1  15.9    29  21.4  57.9    11.1\n 3 female Field  5.33   9.3  47    15      62  25.3 103.     19.5\n 4 female TSpr~  5.16   8.2  45.3  14.7    34  20.3  46.1    10.2\n 5 female Tenn~  4      4.2  36.6  12      57  25.4 109      20.9\n 6 female Tenn~  4.4    4    40.8  13.9    73  22.1  98.1    19.6\n 7 female Tenn~  4.38   7.9  39.8  13.5    88  21.2  80.6    17.1\n 8 female Tenn~  4.08   6.6  37.8  12.1   182  20.5  68.3    15.3\n 9 female Tenn~  4.98   6.4  44.8  14.8    80  17.1  47.6    11.1\n10 female Tenn~  5.16   7.2  44.3  14.5    88  18.3  61.9    12.9\n# i 56 more rows\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Sorting into order\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% arrange(RCC)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 female Netb~  3.8    6.6  36.5  12.4   102  24.4 157.     26.6\n 2 female Netb~  3.9    6.3  35.9  12.1    78  20.1  70      15.0\n 3 female T400m  3.9    6    38.9  13.5    16  19.4  48.4    10.5\n 4 female Row    3.91   7.3  37.6  12.9    43  22.3 126.     25.2\n 5 female Netb~  3.95   6.6  38.4  12.8    33  19.9  68.9    15.6\n 6 female Row    3.95   3.3  36.9  12.5    40  24.5  74.9    16.4\n 7 female Netb~  3.96   5.5  36.3  12.4    71  22.6 101.     17.9\n 8 female BBall  3.96   7.5  37.5  12.3    60  20.6 109.     19.8\n 9 female Tenn~  4      4.2  36.6  12      57  25.4 109      20.9\n10 female Netb~  4.02   9.1  37.7  12.7   107  23.0  77      18.1\n# i 192 more rows\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Breaking ties by another variable\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% arrange(RCC, BMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 female Netb~  3.8    6.6  36.5  12.4   102  24.4 157.     26.6\n 2 female T400m  3.9    6    38.9  13.5    16  19.4  48.4    10.5\n 3 female Netb~  3.9    6.3  35.9  12.1    78  20.1  70      15.0\n 4 female Row    3.91   7.3  37.6  12.9    43  22.3 126.     25.2\n 5 female Netb~  3.95   6.6  38.4  12.8    33  19.9  68.9    15.6\n 6 female Row    3.95   3.3  36.9  12.5    40  24.5  74.9    16.4\n 7 female BBall  3.96   7.5  37.5  12.3    60  20.6 109.     19.8\n 8 female Netb~  3.96   5.5  36.3  12.4    71  22.6 101.     17.9\n 9 female Tenn~  4      4.2  36.6  12      57  25.4 109      20.9\n10 female Netb~  4.02   9.1  37.7  12.7   107  23.0  77      18.1\n# i 192 more rows\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Descending order\n\n\\footnotesize\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% arrange(desc(BMI))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 13\n   Sex    Sport   RCC   WCC    Hc    Hg  Ferr   BMI   SSF `%Bfat`\n   <chr>  <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>\n 1 male   Field  5.48   6.2  48.2  16.3    94  34.4  82.7   13.9 \n 2 male   Field  4.96   8.3  45.3  15.7   141  33.7 114.    17.4 \n 3 male   Field  5.48   4.6  49.4  18     132  32.5  55.7    8.51\n 4 female Field  4.75   7.5  43.8  15.2    90  31.9 132.    23.0 \n 5 male   Field  5.01   8.9  46    15.9   212  30.2 112.    19.9 \n 6 male   Field  5.01   8.9  46    15.9   212  30.2  96.9   18.1 \n 7 male   Field  5.09   8.9  46.3  15.4    44  30.0  71.1   14.0 \n 8 female Field  4.58   5.8  42.1  14.7   164  28.6 110.    21.3 \n 9 female Field  4.51   9    39.7  14.3    36  28.1 136.    24.9 \n10 male   WPolo  5.34   6.2  49.8  17.2   143  27.8  75.7   13.5 \n# i 192 more rows\n# i 3 more variables: LBM <dbl>, Ht <dbl>, Wt <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## \"The top ones\"\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>%\n  arrange(desc(Wt)) %>%\n  slice(1:7) %>%\n  select(Sport, Wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 2\n  Sport    Wt\n  <chr> <dbl>\n1 Field  123.\n2 BBall  114.\n3 Field  111.\n4 Field  108.\n5 Field  103.\n6 WPolo  101 \n7 BBall  100.\n```\n\n\n:::\n:::\n\n\n\n\n## Another way\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% \n  slice_max(order_by = Wt, n=7) %>% \n  select(Sport, Wt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 2\n  Sport    Wt\n  <chr> <dbl>\n1 Field  123.\n2 BBall  114.\n3 Field  111.\n4 Field  108.\n5 Field  103.\n6 WPolo  101 \n7 BBall  100.\n```\n\n\n:::\n:::\n\n\n\n\n## Create new variables from old ones\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>%\n  mutate(wt_lb = Wt * 2.2) %>%\n  select(Sport, Sex, Wt, wt_lb) %>% \n  arrange(Wt) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 202 x 4\n   Sport   Sex       Wt wt_lb\n   <chr>   <chr>  <dbl> <dbl>\n 1 Gym     female  37.8  83.2\n 2 Gym     female  43.8  96.4\n 3 Gym     female  45.1  99.2\n 4 Tennis  female  45.8 101. \n 5 Tennis  female  47.4 104. \n 6 Gym     female  47.8 105. \n 7 T400m   female  49.2 108. \n 8 Row     female  49.8 110. \n 9 T400m   female  50.9 112. \n10 Netball female  51.9 114. \n# i 192 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Turning the result into a number\n\nOutput is always data frame unless you explicitly turn it into something\nelse, eg. the weight of the heaviest athlete, as a number:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% arrange(desc(Wt)) %>% \n  pluck(\"Wt\", 1) -> heavy\nheavy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123.2\n```\n\n\n:::\n:::\n\n\n\n\nOr the 20 heaviest weights in descending order:\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>%\n  arrange(desc(Wt)) %>%\n  slice(1:20) %>%\n  pluck(\"Wt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 123.20 113.70 111.30 108.20 102.70 101.00 100.20  98.00  97.90  97.90\n[11]  97.00  96.90  96.30  94.80  94.80  94.70  94.70  94.60  94.25  94.20\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Another way to do the last one\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>%\n  arrange(desc(Wt)) %>%\n  slice(1:20) %>%\n  pull(\"Wt\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 123.20 113.70 111.30 108.20 102.70 101.00 100.20  98.00  97.90  97.90\n[11]  97.00  96.90  96.30  94.80  94.80  94.70  94.70  94.60  94.25  94.20\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n`pull` grabs the column you name *as a vector* (of whatever it\ncontains).\n\n## To find the mean height of the women athletes\n\nTwo ways:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>% group_by(Sex) %>% summarize(m = mean(Ht))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 2\n  Sex        m\n  <chr>  <dbl>\n1 female  175.\n2 male    186.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nathletes %>%\n  filter(Sex == \"female\") %>%\n  summarize(m = mean(Ht))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 1\n      m\n  <dbl>\n1  175.\n```\n\n\n:::\n:::\n\n\n\n\n## Summary of data selection/arrangement \"verbs\" {.smaller}\n\n| Verb           | Purpose                                                          |\n|:---------------|:-----------------------------------------------------------------|\n| `select`       | Choose columns                                                   |\n| `slice`        | Choose rows by number                                            |\n| `slice_sample` | Choose random rows                                               |\n| `slice_max`    | Choose rows with largest values on a variable (also `slice_min`) |\n| `filter`       | Choose rows satisfying conditions                                |\n| `arrange`      | Sort in order by column(s)                                       |\n| `mutate`       | Create new variables                                             |\n| `group_by`     | Create groups to work with                                       |\n| `summarize`    | Calculate summary statistics (by groups if defined)              |\n| `pluck`        | Extract items from data frame                                    |\n| `pull`         | Extract a single column from a data frame as a vector            |\n\n## Looking things up in another data frame\n\n-   Suppose you are working in the nails department of a hardware store\n    and you find that you have sold these items:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/nail_sales.csv\"\nsales <- read_csv(my_url)\nsales\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 2\n  product_code sales\n  <chr>        <dbl>\n1 061-5344-6      10\n2 161-0090-0       6\n3 061-5388-2       2\n4 161-0199-4       8\n5 061-5375-2       5\n6 061-4525-2       3\n```\n\n\n:::\n:::\n\n\n\n\n## Product descriptions and prices\n\n-   but you don't remember what these product codes are, and you would\n    like to know the total revenue from these sales.\n\n-   Fortunately you found a list of product descriptions and prices:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/nail_desc.csv\"\ndesc <- read_csv(my_url)\ndesc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 5\n  product_code description    size        qty price\n  <chr>        <chr>          <chr>     <dbl> <dbl>\n1 061-4525-2   spike nail     \"10\\\"\"        1  1.49\n2 061-5329-4   masonry nail   \"1.5\\\"\"     112  8.19\n3 061-5344-6   finishing nail \"1\\\"\"      1298  6.99\n4 061-5375-2   roofing nail   \"1.25\\\"\"    192  6.99\n5 061-5388-2   framing nail   \"4\\\"\"        25  8.19\n6 161-0090-0   wood nail      \"1\\\"\"        25  2.39\n7 161-0199-4   panel nail     \"1-5/8\\\"\"    20  4.69\n```\n\n\n:::\n:::\n\n\n\n\n## The lookup\n\n-   How do you \"look up\" the product codes to find the product\n    descriptions and prices?\n-   `left_join`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales %>% left_join(desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n  product_code sales description    size        qty price\n  <chr>        <dbl> <chr>          <chr>     <dbl> <dbl>\n1 061-5344-6      10 finishing nail \"1\\\"\"      1298  6.99\n2 161-0090-0       6 wood nail      \"1\\\"\"        25  2.39\n3 061-5388-2       2 framing nail   \"4\\\"\"        25  8.19\n4 161-0199-4       8 panel nail     \"1-5/8\\\"\"    20  4.69\n5 061-5375-2       5 roofing nail   \"1.25\\\"\"    192  6.99\n6 061-4525-2       3 spike nail     \"10\\\"\"        1  1.49\n```\n\n\n:::\n:::\n\n\n\n\n## What we have\n\n-   this looks up all the rows in the *first* dataframe that are also in\n    the *second*.\n-   by default matches all columns with same name in two dataframes\n    (`product_code` here)\n-   get *all* columns in *both* dataframes. The rows are the ones for\n    that `product_code`.\n\nSo now can work out how much the total revenue was:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales %>% left_join(desc) %>% \n  mutate(product_revenue = sales*price) %>% \n  summarize(total_revenue = sum(product_revenue))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 1\n  total_revenue\n          <dbl>\n1          178.\n```\n\n\n:::\n:::\n\n\n\n\n## More comments\n\n-   if any product codes are not matched, you get NA in the added\n    columns\n-   anything in the *second* dataframe that was not in the first does\n    not appear (here, any products that were not sold)\n-   other variations (examples follow):\n    -   if there are two columns with the same name in the two\n        dataframes, and you only want to match on one, use `by` with one\n        column name\n    -   if the columns you want to look up have different names in the\n        two dataframes, use `by` with a \"named list\"\n\n## Matching on only some matching names\n\n-   Suppose the `sales` dataframe *also* had a column `qty` (which was\n    the quantity sold):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales %>% rename(\"qty\"=\"sales\") -> sales1\nsales1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 2\n  product_code   qty\n  <chr>        <dbl>\n1 061-5344-6      10\n2 161-0090-0       6\n3 061-5388-2       2\n4 161-0199-4       8\n5 061-5375-2       5\n6 061-4525-2       3\n```\n\n\n:::\n:::\n\n\n\n\n-   The `qty` in `sales1` is the quantity sold, but the `qty` in `desc`\n    is the number of nails in a package. These should *not* be matched:\n    they are different things.\n\n## Matching only on product code\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales1 %>% \n  left_join(desc, join_by(product_code))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n  product_code qty.x description    size      qty.y price\n  <chr>        <dbl> <chr>          <chr>     <dbl> <dbl>\n1 061-5344-6      10 finishing nail \"1\\\"\"      1298  6.99\n2 161-0090-0       6 wood nail      \"1\\\"\"        25  2.39\n3 061-5388-2       2 framing nail   \"4\\\"\"        25  8.19\n4 161-0199-4       8 panel nail     \"1-5/8\\\"\"    20  4.69\n5 061-5375-2       5 roofing nail   \"1.25\\\"\"    192  6.99\n6 061-4525-2       3 spike nail     \"10\\\"\"        1  1.49\n```\n\n\n:::\n:::\n\n\n\n\n-   Get `qty.x` (from `sales1`) and `qty.y` (from `desc`).\n\n## Matching on different names 1/2\n\n-   Suppose the product code in `sales` was just `code`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales %>% rename(\"code\" = \"product_code\") -> sales2\nsales2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 2\n  code       sales\n  <chr>      <dbl>\n1 061-5344-6    10\n2 161-0090-0     6\n3 061-5388-2     2\n4 161-0199-4     8\n5 061-5375-2     5\n6 061-4525-2     3\n```\n\n\n:::\n:::\n\n\n\n\n-   How to match the two product codes that have different names?\n\n## Matching on different names 2/2\n\n-   Use `join_by`, but like this:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales2 %>% \n  left_join(desc, join_by(code == product_code))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 6\n  code       sales description    size        qty price\n  <chr>      <dbl> <chr>          <chr>     <dbl> <dbl>\n1 061-5344-6    10 finishing nail \"1\\\"\"      1298  6.99\n2 161-0090-0     6 wood nail      \"1\\\"\"        25  2.39\n3 061-5388-2     2 framing nail   \"4\\\"\"        25  8.19\n4 161-0199-4     8 panel nail     \"1-5/8\\\"\"    20  4.69\n5 061-5375-2     5 roofing nail   \"1.25\\\"\"    192  6.99\n6 061-4525-2     3 spike nail     \"10\\\"\"        1  1.49\n```\n\n\n:::\n:::\n\n\n\n\n## Other types of join\n\n-   `right_join`: interchanges roles, looking up keys from second\n    dataframe in first.\n-   `anti_join`: give me all the rows in the first dataframe that are\n    *not* in the second. (Use this eg. to see whether the product\n    descriptions are incomplete.)\n-   `full_join`: give me all the rows in both dataframes, with missings\n    as needed.\n\n## Full join here\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales %>% full_join(desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 x 6\n  product_code sales description    size        qty price\n  <chr>        <dbl> <chr>          <chr>     <dbl> <dbl>\n1 061-5344-6      10 finishing nail \"1\\\"\"      1298  6.99\n2 161-0090-0       6 wood nail      \"1\\\"\"        25  2.39\n3 061-5388-2       2 framing nail   \"4\\\"\"        25  8.19\n4 161-0199-4       8 panel nail     \"1-5/8\\\"\"    20  4.69\n5 061-5375-2       5 roofing nail   \"1.25\\\"\"    192  6.99\n6 061-4525-2       3 spike nail     \"10\\\"\"        1  1.49\n7 061-5329-4      NA masonry nail   \"1.5\\\"\"     112  8.19\n```\n\n\n:::\n:::\n\n\n\n\n-   The missing `sales` for \"masonry nail\" says that it was in the\n    lookup table `desc`, but we didn't sell any.\n\n## The same thing, but with `anti_join`\n\nAnything in first df but not in second?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndesc %>% anti_join(sales)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 5\n  product_code description  size      qty price\n  <chr>        <chr>        <chr>   <dbl> <dbl>\n1 061-5329-4   masonry nail \"1.5\\\"\"   112  8.19\n```\n\n\n:::\n:::\n\n\n\n\nMasonry nails are the only thing in our product description file that we\ndid not sell any of.\n\n## The other way around\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales %>% anti_join(desc)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 x 2\n# i 2 variables: product_code <chr>, sales <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nThere was nothing we sold that was not in the description file.",
    "supporting": [
      "choosing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}