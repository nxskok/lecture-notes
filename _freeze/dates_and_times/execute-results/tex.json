{
  "hash": "9eeca9efbb52064c876b116ed96afd54",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dates and Times\"\n---\n\n\n\n\n\n## Packages for this section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# library(lubridate)\n```\n:::\n\n\n\n\n`lubridate` is the package that handles dates and times, but is now part of the `tidyverse`, so no need to load separately.\n\n## Dates\n- Dates represented on computers as “days since an origin”,\ntypically Jan 1, 1970, with a negative date being before the origin: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydates <- c(\"1970-01-01\", \"2007-09-04\", \"1931-08-05\")\n(somedates <- tibble(text = mydates) %>%\n  mutate(\n    d = as.Date(text),\n    numbers = as.numeric(d)\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  text       d          numbers\n  <chr>      <date>       <dbl>\n1 1970-01-01 1970-01-01       0\n2 2007-09-04 2007-09-04   13760\n3 1931-08-05 1931-08-05  -14029\n```\n\n\n:::\n:::\n\n\n\n\n## Doing arithmetic with dates\n\n- Dates are \"actually\" numbers, so can add and subtract (difference is 2007 date in `d` minus others): \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsomedates %>% mutate(plus30 = d + 30, diffs = d[2] - d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  text       d          numbers plus30     diffs     \n  <chr>      <date>       <dbl> <date>     <drtn>    \n1 1970-01-01 1970-01-01       0 1970-01-31 13760 days\n2 2007-09-04 2007-09-04   13760 2007-10-04     0 days\n3 1931-08-05 1931-08-05  -14029 1931-09-04 27789 days\n```\n\n\n:::\n:::\n\n\n\n\n## Reading in dates from a file\n- `read_csv` and the others can guess that you have dates, if you\nformat them as year-month-day, like column 1 of this `.csv`:\n\n```\ndate,status,dunno\n2011-08-03,hello,August 3 2011\n2011-11-15,still here,November 15 2011\n2012-02-01,goodbye,February 1 2012\n```\n\n- Then read them in:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/mydates.csv\"\nddd <- read_csv(my_url)\n```\n:::\n\n\n\n\n- read_csv guessed that the 1st column is dates, but not 3rd.\n\n## The data as read in\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  date       status     dunno           \n  <date>     <chr>      <chr>           \n1 2011-08-03 hello      August 3 2011   \n2 2011-11-15 still here November 15 2011\n3 2012-02-01 goodbye    February 1 2012 \n```\n\n\n:::\n:::\n\n\n\n\n## Dates in other formats \n\n- Preceding shows that dates should be stored as text in format\nyyyy-mm-dd (ISO standard).\n- To deal with dates in other formats, use package `lubridate` and\nconvert. For example, dates in US format with month first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(usdates = c(\"05/27/2012\", \"01/03/2016\", \"12/31/2015\")) %>%\n  mutate(iso = mdy(usdates))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  usdates    iso       \n  <chr>      <date>    \n1 05/27/2012 2012-05-27\n2 01/03/2016 2016-01-03\n3 12/31/2015 2015-12-31\n```\n\n\n:::\n:::\n\n\n\n\n## Trying to read these as UK dates \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(usdates = c(\"05/27/2012\", \"01/03/2016\", \"12/31/2015\")) %>%\n  mutate(uk = dmy(usdates))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  usdates    uk        \n  <chr>      <date>    \n1 05/27/2012 NA        \n2 01/03/2016 2016-03-01\n3 12/31/2015 NA        \n```\n\n\n:::\n:::\n\n\n\n\n- For UK-format dates with month second, one of these dates is legit,\nbut the other two make no sense.\n\n## Our data frame's last column:\n\n- Back to this: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  date       status     dunno           \n  <date>     <chr>      <chr>           \n1 2011-08-03 hello      August 3 2011   \n2 2011-11-15 still here November 15 2011\n3 2012-02-01 goodbye    February 1 2012 \n```\n\n\n:::\n:::\n\n\n\n\n- Month, day,  year in that order.\n\n## so interpret as such\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(ddd %>% mutate(date2 = mdy(dunno)) -> d4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  date       status     dunno            date2     \n  <date>     <chr>      <chr>            <date>    \n1 2011-08-03 hello      August 3 2011    2011-08-03\n2 2011-11-15 still here November 15 2011 2011-11-15\n3 2012-02-01 goodbye    February 1 2012  2012-02-01\n```\n\n\n:::\n:::\n\n\n\n\n\n## Are they really the same? \n\n- Column `date2` was correctly converted from column `dunno`: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd4 %>% mutate(equal = identical(date, date2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  date       status     dunno            date2      equal\n  <date>     <chr>      <chr>            <date>     <lgl>\n1 2011-08-03 hello      August 3 2011    2011-08-03 TRUE \n2 2011-11-15 still here November 15 2011 2011-11-15 TRUE \n3 2012-02-01 goodbye    February 1 2012  2012-02-01 TRUE \n```\n\n\n:::\n:::\n\n\n\n\n- The two columns of dates are all the same.\n\n## Making dates from pieces\nStarting from this file:\n\n```\nyear month day\n1970 1 1\n2007 9 4\n1940 4 15\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/pieces.txt\"\ndates0 <- read_delim(my_url, \" \")\n```\n:::\n\n\n\n\n## Making some dates \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates0\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n   year month   day\n  <dbl> <dbl> <dbl>\n1  1970     1     1\n2  2007     9     4\n3  1940     4    15\n```\n\n\n:::\n\n```{.r .cell-code}\ndates0 %>%\n  unite(dates, day, month, year) %>%\n  mutate(d = dmy(dates)) -> newdates\n```\n:::\n\n\n\n\n\n## The results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdates\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  dates     d         \n  <chr>     <date>    \n1 1_1_1970  1970-01-01\n2 4_9_2007  2007-09-04\n3 15_4_1940 1940-04-15\n```\n\n\n:::\n:::\n\n\n\n\n- `unite` glues things together with an underscore between them (if you\ndon’t specify anything else). Syntax: first thing is new column to be\ncreated, other columns are what to make it out of.\n- `unite` makes the original variable columns year, month, day\n*disappear*.\n- The column `dates` is text, while `d` is a real date.\n\n## Extracting information from dates \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdates %>%\n  mutate(\n    mon = month(d),\n    day = day(d),\n    weekday = wday(d, label = TRUE)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 5\n  dates     d            mon   day weekday\n  <chr>     <date>     <dbl> <int> <ord>  \n1 1_1_1970  1970-01-01     1     1 Thu    \n2 4_9_2007  2007-09-04     9     4 Tue    \n3 15_4_1940 1940-04-15     4    15 Mon    \n```\n\n\n:::\n:::\n\n\n\n\n## Dates and times\n- Standard format for times is to put the time after the date, hours,\nminutes, seconds:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(dd <- tibble(text = c(\n  \"1970-01-01 07:50:01\", \"2007-09-04 15:30:00\",\n  \"1940-04-15 06:45:10\", \"2016-02-10 12:26:40\"\n)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 1\n  text               \n  <chr>              \n1 1970-01-01 07:50:01\n2 2007-09-04 15:30:00\n3 1940-04-15 06:45:10\n4 2016-02-10 12:26:40\n```\n\n\n:::\n:::\n\n\n\n\n## Converting text to date-times: \n\n- Then get from this text using `ymd_hms`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>% mutate(dt = ymd_hms(text)) %>% pull(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1970-01-01 07:50:01 UTC\" \"2007-09-04 15:30:00 UTC\"\n[3] \"1940-04-15 06:45:10 UTC\" \"2016-02-10 12:26:40 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Timezones\n\n- Default timezone is “Universal Coordinated Time”. Change it via `tz=`\nand the name of a timezone: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOlsonNames()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  [1] \"Africa/Abidjan\"                 \"Africa/Accra\"                  \n  [3] \"Africa/Addis_Ababa\"             \"Africa/Algiers\"                \n  [5] \"Africa/Asmara\"                  \"Africa/Bamako\"                 \n  [7] \"Africa/Bangui\"                  \"Africa/Banjul\"                 \n  [9] \"Africa/Bissau\"                  \"Africa/Blantyre\"               \n [11] \"Africa/Brazzaville\"             \"Africa/Bujumbura\"              \n [13] \"Africa/Cairo\"                   \"Africa/Casablanca\"             \n [15] \"Africa/Ceuta\"                   \"Africa/Conakry\"                \n [17] \"Africa/Dakar\"                   \"Africa/Dar_es_Salaam\"          \n [19] \"Africa/Djibouti\"                \"Africa/Douala\"                 \n [21] \"Africa/El_Aaiun\"                \"Africa/Freetown\"               \n [23] \"Africa/Gaborone\"                \"Africa/Harare\"                 \n [25] \"Africa/Johannesburg\"            \"Africa/Juba\"                   \n [27] \"Africa/Kampala\"                 \"Africa/Khartoum\"               \n [29] \"Africa/Kigali\"                  \"Africa/Kinshasa\"               \n [31] \"Africa/Lagos\"                   \"Africa/Libreville\"             \n [33] \"Africa/Lome\"                    \"Africa/Luanda\"                 \n [35] \"Africa/Lubumbashi\"              \"Africa/Lusaka\"                 \n [37] \"Africa/Malabo\"                  \"Africa/Maputo\"                 \n [39] \"Africa/Maseru\"                  \"Africa/Mbabane\"                \n [41] \"Africa/Mogadishu\"               \"Africa/Monrovia\"               \n [43] \"Africa/Nairobi\"                 \"Africa/Ndjamena\"               \n [45] \"Africa/Niamey\"                  \"Africa/Nouakchott\"             \n [47] \"Africa/Ouagadougou\"             \"Africa/Porto-Novo\"             \n [49] \"Africa/Sao_Tome\"                \"Africa/Timbuktu\"               \n [51] \"Africa/Tripoli\"                 \"Africa/Tunis\"                  \n [53] \"Africa/Windhoek\"                \"America/Adak\"                  \n [55] \"America/Anchorage\"              \"America/Anguilla\"              \n [57] \"America/Antigua\"                \"America/Araguaina\"             \n [59] \"America/Argentina/Buenos_Aires\" \"America/Argentina/Catamarca\"   \n [61] \"America/Argentina/Cordoba\"      \"America/Argentina/Jujuy\"       \n [63] \"America/Argentina/La_Rioja\"     \"America/Argentina/Mendoza\"     \n [65] \"America/Argentina/Rio_Gallegos\" \"America/Argentina/Salta\"       \n [67] \"America/Argentina/San_Juan\"     \"America/Argentina/San_Luis\"    \n [69] \"America/Argentina/Tucuman\"      \"America/Argentina/Ushuaia\"     \n [71] \"America/Aruba\"                  \"America/Asuncion\"              \n [73] \"America/Atikokan\"               \"America/Atka\"                  \n [75] \"America/Bahia\"                  \"America/Bahia_Banderas\"        \n [77] \"America/Barbados\"               \"America/Belem\"                 \n [79] \"America/Belize\"                 \"America/Blanc-Sablon\"          \n [81] \"America/Boa_Vista\"              \"America/Bogota\"                \n [83] \"America/Boise\"                  \"America/Cambridge_Bay\"         \n [85] \"America/Campo_Grande\"           \"America/Cancun\"                \n [87] \"America/Caracas\"                \"America/Cayenne\"               \n [89] \"America/Cayman\"                 \"America/Chicago\"               \n [91] \"America/Chihuahua\"              \"America/Ciudad_Juarez\"         \n [93] \"America/Coral_Harbour\"          \"America/Costa_Rica\"            \n [95] \"America/Creston\"                \"America/Cuiaba\"                \n [97] \"America/Curacao\"                \"America/Danmarkshavn\"          \n [99] \"America/Dawson\"                 \"America/Dawson_Creek\"          \n[101] \"America/Denver\"                 \"America/Detroit\"               \n[103] \"America/Dominica\"               \"America/Edmonton\"              \n[105] \"America/Eirunepe\"               \"America/El_Salvador\"           \n[107] \"America/Ensenada\"               \"America/Fort_Nelson\"           \n[109] \"America/Fortaleza\"              \"America/Glace_Bay\"             \n[111] \"America/Goose_Bay\"              \"America/Grand_Turk\"            \n[113] \"America/Grenada\"                \"America/Guadeloupe\"            \n[115] \"America/Guatemala\"              \"America/Guayaquil\"             \n[117] \"America/Guyana\"                 \"America/Halifax\"               \n[119] \"America/Havana\"                 \"America/Hermosillo\"            \n[121] \"America/Indiana/Indianapolis\"   \"America/Indiana/Knox\"          \n[123] \"America/Indiana/Marengo\"        \"America/Indiana/Petersburg\"    \n[125] \"America/Indiana/Tell_City\"      \"America/Indiana/Vevay\"         \n[127] \"America/Indiana/Vincennes\"      \"America/Indiana/Winamac\"       \n[129] \"America/Inuvik\"                 \"America/Iqaluit\"               \n[131] \"America/Jamaica\"                \"America/Juneau\"                \n[133] \"America/Kentucky/Louisville\"    \"America/Kentucky/Monticello\"   \n[135] \"America/Kralendijk\"             \"America/La_Paz\"                \n[137] \"America/Lima\"                   \"America/Los_Angeles\"           \n[139] \"America/Lower_Princes\"          \"America/Maceio\"                \n[141] \"America/Managua\"                \"America/Manaus\"                \n[143] \"America/Marigot\"                \"America/Martinique\"            \n[145] \"America/Matamoros\"              \"America/Mazatlan\"              \n[147] \"America/Menominee\"              \"America/Merida\"                \n[149] \"America/Metlakatla\"             \"America/Mexico_City\"           \n[151] \"America/Miquelon\"               \"America/Moncton\"               \n[153] \"America/Monterrey\"              \"America/Montevideo\"            \n[155] \"America/Montreal\"               \"America/Montserrat\"            \n[157] \"America/Nassau\"                 \"America/New_York\"              \n[159] \"America/Nipigon\"                \"America/Nome\"                  \n[161] \"America/Noronha\"                \"America/North_Dakota/Beulah\"   \n[163] \"America/North_Dakota/Center\"    \"America/North_Dakota/New_Salem\"\n[165] \"America/Nuuk\"                   \"America/Ojinaga\"               \n[167] \"America/Panama\"                 \"America/Pangnirtung\"           \n[169] \"America/Paramaribo\"             \"America/Phoenix\"               \n[171] \"America/Port_of_Spain\"          \"America/Port-au-Prince\"        \n[173] \"America/Porto_Acre\"             \"America/Porto_Velho\"           \n[175] \"America/Puerto_Rico\"            \"America/Punta_Arenas\"          \n[177] \"America/Rainy_River\"            \"America/Rankin_Inlet\"          \n[179] \"America/Recife\"                 \"America/Regina\"                \n[181] \"America/Resolute\"               \"America/Rio_Branco\"            \n[183] \"America/Santa_Isabel\"           \"America/Santarem\"              \n[185] \"America/Santiago\"               \"America/Santo_Domingo\"         \n[187] \"America/Sao_Paulo\"              \"America/Scoresbysund\"          \n[189] \"America/Shiprock\"               \"America/Sitka\"                 \n[191] \"America/St_Barthelemy\"          \"America/St_Johns\"              \n[193] \"America/St_Kitts\"               \"America/St_Lucia\"              \n[195] \"America/St_Thomas\"              \"America/St_Vincent\"            \n[197] \"America/Swift_Current\"          \"America/Tegucigalpa\"           \n[199] \"America/Thule\"                  \"America/Thunder_Bay\"           \n[201] \"America/Tijuana\"                \"America/Toronto\"               \n[203] \"America/Tortola\"                \"America/Vancouver\"             \n[205] \"America/Virgin\"                 \"America/Whitehorse\"            \n[207] \"America/Winnipeg\"               \"America/Yakutat\"               \n[209] \"America/Yellowknife\"            \"Antarctica/Casey\"              \n[211] \"Antarctica/Davis\"               \"Antarctica/DumontDUrville\"     \n[213] \"Antarctica/Macquarie\"           \"Antarctica/Mawson\"             \n[215] \"Antarctica/McMurdo\"             \"Antarctica/Palmer\"             \n[217] \"Antarctica/Rothera\"             \"Antarctica/Syowa\"              \n[219] \"Antarctica/Troll\"               \"Antarctica/Vostok\"             \n[221] \"Arctic/Longyearbyen\"            \"Asia/Aden\"                     \n[223] \"Asia/Almaty\"                    \"Asia/Amman\"                    \n[225] \"Asia/Anadyr\"                    \"Asia/Aqtau\"                    \n[227] \"Asia/Aqtobe\"                    \"Asia/Ashgabat\"                 \n[229] \"Asia/Atyrau\"                    \"Asia/Baghdad\"                  \n[231] \"Asia/Bahrain\"                   \"Asia/Baku\"                     \n[233] \"Asia/Bangkok\"                   \"Asia/Barnaul\"                  \n[235] \"Asia/Beirut\"                    \"Asia/Bishkek\"                  \n[237] \"Asia/Brunei\"                    \"Asia/Chita\"                    \n[239] \"Asia/Choibalsan\"                \"Asia/Chongqing\"                \n[241] \"Asia/Colombo\"                   \"Asia/Damascus\"                 \n[243] \"Asia/Dhaka\"                     \"Asia/Dili\"                     \n[245] \"Asia/Dubai\"                     \"Asia/Dushanbe\"                 \n[247] \"Asia/Famagusta\"                 \"Asia/Gaza\"                     \n[249] \"Asia/Harbin\"                    \"Asia/Hebron\"                   \n[251] \"Asia/Ho_Chi_Minh\"               \"Asia/Hong_Kong\"                \n[253] \"Asia/Hovd\"                      \"Asia/Irkutsk\"                  \n[255] \"Asia/Istanbul\"                  \"Asia/Jakarta\"                  \n[257] \"Asia/Jayapura\"                  \"Asia/Jerusalem\"                \n[259] \"Asia/Kabul\"                     \"Asia/Kamchatka\"                \n[261] \"Asia/Karachi\"                   \"Asia/Kashgar\"                  \n[263] \"Asia/Kathmandu\"                 \"Asia/Khandyga\"                 \n[265] \"Asia/Kolkata\"                   \"Asia/Krasnoyarsk\"              \n[267] \"Asia/Kuala_Lumpur\"              \"Asia/Kuching\"                  \n[269] \"Asia/Kuwait\"                    \"Asia/Macau\"                    \n[271] \"Asia/Magadan\"                   \"Asia/Makassar\"                 \n[273] \"Asia/Manila\"                    \"Asia/Muscat\"                   \n[275] \"Asia/Nicosia\"                   \"Asia/Novokuznetsk\"             \n[277] \"Asia/Novosibirsk\"               \"Asia/Omsk\"                     \n[279] \"Asia/Oral\"                      \"Asia/Phnom_Penh\"               \n[281] \"Asia/Pontianak\"                 \"Asia/Pyongyang\"                \n[283] \"Asia/Qatar\"                     \"Asia/Qostanay\"                 \n[285] \"Asia/Qyzylorda\"                 \"Asia/Riyadh\"                   \n[287] \"Asia/Sakhalin\"                  \"Asia/Samarkand\"                \n[289] \"Asia/Seoul\"                     \"Asia/Shanghai\"                 \n[291] \"Asia/Singapore\"                 \"Asia/Srednekolymsk\"            \n[293] \"Asia/Taipei\"                    \"Asia/Tashkent\"                 \n[295] \"Asia/Tbilisi\"                   \"Asia/Tehran\"                   \n[297] \"Asia/Tel_Aviv\"                  \"Asia/Thimphu\"                  \n[299] \"Asia/Tokyo\"                     \"Asia/Tomsk\"                    \n[301] \"Asia/Ulaanbaatar\"               \"Asia/Urumqi\"                   \n[303] \"Asia/Ust-Nera\"                  \"Asia/Vientiane\"                \n[305] \"Asia/Vladivostok\"               \"Asia/Yakutsk\"                  \n[307] \"Asia/Yangon\"                    \"Asia/Yekaterinburg\"            \n[309] \"Asia/Yerevan\"                   \"Atlantic/Azores\"               \n[311] \"Atlantic/Bermuda\"               \"Atlantic/Canary\"               \n[313] \"Atlantic/Cape_Verde\"            \"Atlantic/Faroe\"                \n[315] \"Atlantic/Jan_Mayen\"             \"Atlantic/Madeira\"              \n[317] \"Atlantic/Reykjavik\"             \"Atlantic/South_Georgia\"        \n[319] \"Atlantic/St_Helena\"             \"Atlantic/Stanley\"              \n[321] \"Australia/Adelaide\"             \"Australia/Brisbane\"            \n[323] \"Australia/Broken_Hill\"          \"Australia/Canberra\"            \n[325] \"Australia/Currie\"               \"Australia/Darwin\"              \n[327] \"Australia/Eucla\"                \"Australia/Hobart\"              \n[329] \"Australia/Lindeman\"             \"Australia/Lord_Howe\"           \n[331] \"Australia/Melbourne\"            \"Australia/Perth\"               \n[333] \"Australia/Sydney\"               \"Australia/Yancowinna\"          \n[335] \"CET\"                            \"CST6CDT\"                       \n[337] \"EET\"                            \"EST\"                           \n[339] \"EST5EDT\"                        \"Etc/GMT\"                       \n[341] \"Etc/GMT-0\"                      \"Etc/GMT-1\"                     \n[343] \"Etc/GMT-10\"                     \"Etc/GMT-11\"                    \n[345] \"Etc/GMT-12\"                     \"Etc/GMT-13\"                    \n[347] \"Etc/GMT-14\"                     \"Etc/GMT-2\"                     \n[349] \"Etc/GMT-3\"                      \"Etc/GMT-4\"                     \n[351] \"Etc/GMT-5\"                      \"Etc/GMT-6\"                     \n[353] \"Etc/GMT-7\"                      \"Etc/GMT-8\"                     \n[355] \"Etc/GMT-9\"                      \"Etc/GMT+0\"                     \n[357] \"Etc/GMT+1\"                      \"Etc/GMT+10\"                    \n[359] \"Etc/GMT+11\"                     \"Etc/GMT+12\"                    \n[361] \"Etc/GMT+2\"                      \"Etc/GMT+3\"                     \n[363] \"Etc/GMT+4\"                      \"Etc/GMT+5\"                     \n[365] \"Etc/GMT+6\"                      \"Etc/GMT+7\"                     \n[367] \"Etc/GMT+8\"                      \"Etc/GMT+9\"                     \n[369] \"Etc/GMT0\"                       \"Etc/Greenwich\"                 \n[371] \"Etc/UCT\"                        \"Etc/Universal\"                 \n[373] \"Etc/UTC\"                        \"Etc/Zulu\"                      \n[375] \"Europe/Amsterdam\"               \"Europe/Andorra\"                \n[377] \"Europe/Astrakhan\"               \"Europe/Athens\"                 \n[379] \"Europe/Belfast\"                 \"Europe/Belgrade\"               \n[381] \"Europe/Berlin\"                  \"Europe/Bratislava\"             \n[383] \"Europe/Brussels\"                \"Europe/Bucharest\"              \n[385] \"Europe/Budapest\"                \"Europe/Busingen\"               \n[387] \"Europe/Chisinau\"                \"Europe/Copenhagen\"             \n[389] \"Europe/Dublin\"                  \"Europe/Gibraltar\"              \n[391] \"Europe/Guernsey\"                \"Europe/Helsinki\"               \n[393] \"Europe/Isle_of_Man\"             \"Europe/Istanbul\"               \n[395] \"Europe/Jersey\"                  \"Europe/Kaliningrad\"            \n[397] \"Europe/Kirov\"                   \"Europe/Kyiv\"                   \n[399] \"Europe/Lisbon\"                  \"Europe/Ljubljana\"              \n[401] \"Europe/London\"                  \"Europe/Luxembourg\"             \n[403] \"Europe/Madrid\"                  \"Europe/Malta\"                  \n[405] \"Europe/Mariehamn\"               \"Europe/Minsk\"                  \n[407] \"Europe/Monaco\"                  \"Europe/Moscow\"                 \n[409] \"Europe/Nicosia\"                 \"Europe/Oslo\"                   \n[411] \"Europe/Paris\"                   \"Europe/Podgorica\"              \n[413] \"Europe/Prague\"                  \"Europe/Riga\"                   \n[415] \"Europe/Rome\"                    \"Europe/Samara\"                 \n[417] \"Europe/San_Marino\"              \"Europe/Sarajevo\"               \n[419] \"Europe/Saratov\"                 \"Europe/Simferopol\"             \n[421] \"Europe/Skopje\"                  \"Europe/Sofia\"                  \n[423] \"Europe/Stockholm\"               \"Europe/Tallinn\"                \n[425] \"Europe/Tirane\"                  \"Europe/Tiraspol\"               \n[427] \"Europe/Ulyanovsk\"               \"Europe/Vaduz\"                  \n[429] \"Europe/Vatican\"                 \"Europe/Vienna\"                 \n[431] \"Europe/Vilnius\"                 \"Europe/Volgograd\"              \n[433] \"Europe/Warsaw\"                  \"Europe/Zagreb\"                 \n[435] \"Europe/Zurich\"                  \"Factory\"                       \n[437] \"GMT\"                            \"HST\"                           \n[439] \"Indian/Antananarivo\"            \"Indian/Chagos\"                 \n[441] \"Indian/Christmas\"               \"Indian/Cocos\"                  \n[443] \"Indian/Comoro\"                  \"Indian/Kerguelen\"              \n[445] \"Indian/Mahe\"                    \"Indian/Maldives\"               \n[447] \"Indian/Mauritius\"               \"Indian/Mayotte\"                \n[449] \"Indian/Reunion\"                 \"MET\"                           \n[451] \"MST\"                            \"MST7MDT\"                       \n[453] \"Pacific/Apia\"                   \"Pacific/Auckland\"              \n[455] \"Pacific/Bougainville\"           \"Pacific/Chatham\"               \n[457] \"Pacific/Chuuk\"                  \"Pacific/Easter\"                \n[459] \"Pacific/Efate\"                  \"Pacific/Fakaofo\"               \n[461] \"Pacific/Fiji\"                   \"Pacific/Funafuti\"              \n[463] \"Pacific/Galapagos\"              \"Pacific/Gambier\"               \n[465] \"Pacific/Guadalcanal\"            \"Pacific/Guam\"                  \n[467] \"Pacific/Honolulu\"               \"Pacific/Johnston\"              \n[469] \"Pacific/Kanton\"                 \"Pacific/Kiritimati\"            \n[471] \"Pacific/Kosrae\"                 \"Pacific/Kwajalein\"             \n[473] \"Pacific/Majuro\"                 \"Pacific/Marquesas\"             \n[475] \"Pacific/Midway\"                 \"Pacific/Nauru\"                 \n[477] \"Pacific/Niue\"                   \"Pacific/Norfolk\"               \n[479] \"Pacific/Noumea\"                 \"Pacific/Pago_Pago\"             \n[481] \"Pacific/Palau\"                  \"Pacific/Pitcairn\"              \n[483] \"Pacific/Pohnpei\"                \"Pacific/Port_Moresby\"          \n[485] \"Pacific/Rarotonga\"              \"Pacific/Saipan\"                \n[487] \"Pacific/Samoa\"                  \"Pacific/Tahiti\"                \n[489] \"Pacific/Tarawa\"                 \"Pacific/Tongatapu\"             \n[491] \"Pacific/Wake\"                   \"Pacific/Wallis\"                \n[493] \"Pacific/Yap\"                    \"PST8PDT\"                       \n[495] \"UTC\"                            \"WET\"                           \nattr(,\"Version\")\n[1] \"2024b\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>% \n  mutate(dt = ymd_hms(text, tz = \"America/Toronto\")) -> dd\ndd %>% mutate(zone = tz(dt))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 3\n  text                dt                  zone           \n  <chr>               <dttm>              <chr>          \n1 1970-01-01 07:50:01 1970-01-01 07:50:01 America/Toronto\n2 2007-09-04 15:30:00 2007-09-04 15:30:00 America/Toronto\n3 1940-04-15 06:45:10 1940-04-15 06:45:10 America/Toronto\n4 2016-02-10 12:26:40 2016-02-10 12:26:40 America/Toronto\n```\n\n\n:::\n:::\n\n\n\n\n## Extracting time parts\n- As you would expect: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>%\n  select(-text) %>%\n  mutate(\n    h = hour(dt),\n    sec = second(dt),\n    min = minute(dt),\n    zone = tz(dt)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 5\n  dt                      h   sec   min zone           \n  <dttm>              <int> <dbl> <int> <chr>          \n1 1970-01-01 07:50:01     7     1    50 America/Toronto\n2 2007-09-04 15:30:00    15     0    30 America/Toronto\n3 1940-04-15 06:45:10     6    10    45 America/Toronto\n4 2016-02-10 12:26:40    12    40    26 America/Toronto\n```\n\n\n:::\n:::\n\n\n\n\n## Same times, but different time zone: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>%\n  select(dt) %>%\n  mutate(oz = with_tz(dt, \"Australia/Sydney\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 2\n  dt                  oz                 \n  <dttm>              <dttm>             \n1 1970-01-01 07:50:01 1970-01-01 22:50:01\n2 2007-09-04 15:30:00 2007-09-05 05:30:00\n3 1940-04-15 06:45:10 1940-04-15 21:45:10\n4 2016-02-10 12:26:40 2016-02-11 04:26:40\n```\n\n\n:::\n:::\n\n\n\n\nIn more detail: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>%\n  mutate(oz = with_tz(dt, \"Australia/Sydney\")) %>%\n  pull(oz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1970-01-01 22:50:01 AEST\" \"2007-09-05 05:30:00 AEST\"\n[3] \"1940-04-15 21:45:10 AEST\" \"2016-02-11 04:26:40 AEDT\"\n```\n\n\n:::\n:::\n\n\n\n\n## How long between date-times?\n- We may need to calculate the time between two events. For example,\nthese are the dates and times that some patients were admitted to\nand discharged from a hospital:\n\n```\nadmit,discharge\n1981-12-10 22:00:00,1982-01-03 14:00:00\n2014-03-07 14:00:00,2014-03-08 09:30:00\n2016-08-31 21:00:00,2016-09-02 17:00:00\n```\n\n## Do they get read in as date-times? \n\n- These ought to get read in and converted to date-times:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/hospital.csv\"\nstays <- read_csv(my_url)\nstays\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 2\n  admit               discharge          \n  <dttm>              <dttm>             \n1 1981-12-10 22:00:00 1982-01-03 14:00:00\n2 2014-03-07 14:00:00 2014-03-08 09:30:00\n3 2016-08-31 21:00:00 2016-09-02 17:00:00\n```\n\n\n:::\n:::\n\n\n\n\n-  and so it proves.\n\n## Subtracting the date-times\n\n- In the obvious way, this gets us an answer:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = discharge - admit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  admit               discharge           stay       \n  <dttm>              <dttm>              <drtn>     \n1 1981-12-10 22:00:00 1982-01-03 14:00:00 568.0 hours\n2 2014-03-07 14:00:00 2014-03-08 09:30:00  19.5 hours\n3 2016-08-31 21:00:00 2016-09-02 17:00:00  44.0 hours\n```\n\n\n:::\n:::\n\n\n\n\n- Number of hours; hard to interpret. \n\n## Days\n\n- Fractional number of days would\nbe better: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% \n  mutate(\n    stay_days = as.period(admit %--% discharge) / days(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  admit               discharge           stay_days\n  <dttm>              <dttm>                  <dbl>\n1 1981-12-10 22:00:00 1982-01-03 14:00:00    23.7  \n2 2014-03-07 14:00:00 2014-03-08 09:30:00     0.812\n3 2016-08-31 21:00:00 2016-09-02 17:00:00     1.83 \n```\n\n\n:::\n:::\n\n\n\n\n## Completed days\n\n- Pull out with `day()` etc, as for a date-time:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% \n  mutate(\n    stay = as.period(admit %--% discharge),\n    stay_days = day(stay),\n    stay_hours = hour(stay)\n    ) %>%\n  select(starts_with(\"stay\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  stay          stay_days stay_hours\n  <Period>          <dbl>      <dbl>\n1 23d 16H 0M 0S        23         16\n2 19H 30M 0S            0         19\n3 1d 20H 0M 0S          1         20\n```\n\n\n:::\n:::\n\n\n\n\n\n## Comments\n- Date-times are stored internally as seconds-since-something, so that\nsubtracting two of them will give, internally, a number of seconds.\n- Just subtracting the date-times is displayed as a time (in units that R\nchooses for us).\n- Convert to fractional times via a \"period\", then divide by `days(1)`, `months(1)` etc.\n- These ideas useful for calculating time from a start point until an event\nhappens (in this case, a patient being discharged from hospital).\n\n",
    "supporting": [
      "dates_and_times_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}