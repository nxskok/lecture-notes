{
  "hash": "6307bde5243f79b4de0cbda114db8d96",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Dates and Times\"\n---\n\n\n\n\n\n## Packages for this section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n# library(lubridate)\n```\n:::\n\n\n\n\n`lubridate` is the package that handles dates and times, but is now part of the `tidyverse`, so no need to load separately.\n\n## Dates\n- Dates represented on computers as “days since an origin”,\ntypically Jan 1, 1970, with a negative date being before the origin: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydates <- c(\"1970-01-01\", \"2007-09-04\", \"1931-08-05\")\n(somedates <- tibble(text = mydates) %>%\n  mutate(\n    d = as.Date(text),\n    numbers = as.numeric(d)\n  ))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"text\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"d\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"numbers\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1970-01-01\",\"2\":\"1970-01-01\",\"3\":\"0\"},{\"1\":\"2007-09-04\",\"2\":\"2007-09-04\",\"3\":\"13760\"},{\"1\":\"1931-08-05\",\"2\":\"1931-08-05\",\"3\":\"-14029\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Doing arithmetic with dates\n\n- Dates are \"actually\" numbers, so can add and subtract (difference is 2007 date in `d` minus others): \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsomedates %>% mutate(plus30 = d + 30, diffs = d[2] - d)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"text\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"d\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"numbers\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"plus30\"],\"name\":[4],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"diffs\"],\"name\":[5],\"type\":[\"drtn\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1970-01-01\",\"2\":\"1970-01-01\",\"3\":\"0\",\"4\":\"1970-01-31\",\"5\":\"13760 days\"},{\"1\":\"2007-09-04\",\"2\":\"2007-09-04\",\"3\":\"13760\",\"4\":\"2007-10-04\",\"5\":\"0 days\"},{\"1\":\"1931-08-05\",\"2\":\"1931-08-05\",\"3\":\"-14029\",\"4\":\"1931-09-04\",\"5\":\"27789 days\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Reading in dates from a file\n- `read_csv` and the others can guess that you have dates, if you\nformat them as year-month-day, like column 1 of this `.csv`:\n\n```\ndate,status,dunno\n2011-08-03,hello,August 3 2011\n2011-11-15,still here,November 15 2011\n2012-02-01,goodbye,February 1 2012\n```\n\n- Then read them in:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/mydates.csv\"\nddd <- read_csv(my_url)\n```\n:::\n\n\n\n\n- read_csv guessed that the 1st column is dates, but not 3rd.\n\n## The data as read in\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddd\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"date\"],\"name\":[1],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"status\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"dunno\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"2011-08-03\",\"2\":\"hello\",\"3\":\"August 3 2011\"},{\"1\":\"2011-11-15\",\"2\":\"still here\",\"3\":\"November 15 2011\"},{\"1\":\"2012-02-01\",\"2\":\"goodbye\",\"3\":\"February 1 2012\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Dates in other formats \n\n- Preceding shows that dates should be stored as text in format\nyyyy-mm-dd (ISO standard).\n- To deal with dates in other formats, use package `lubridate` and\nconvert. For example, dates in US format with month first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(usdates = c(\"05/27/2012\", \"01/03/2016\", \"12/31/2015\")) %>%\n  mutate(iso = mdy(usdates))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"usdates\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"iso\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"05/27/2012\",\"2\":\"2012-05-27\"},{\"1\":\"01/03/2016\",\"2\":\"2016-01-03\"},{\"1\":\"12/31/2015\",\"2\":\"2015-12-31\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Trying to read these as UK dates \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(usdates = c(\"05/27/2012\", \"01/03/2016\", \"12/31/2015\")) %>%\n  mutate(uk = dmy(usdates))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"usdates\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"uk\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"05/27/2012\",\"2\":\"<NA>\"},{\"1\":\"01/03/2016\",\"2\":\"2016-03-01\"},{\"1\":\"12/31/2015\",\"2\":\"<NA>\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n- For UK-format dates with month second, one of these dates is legit (but wrong),\nbut the other two make no sense.\n\n## Our data frame's last column:\n\n- Back to this: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nddd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  date       status     dunno           \n  <date>     <chr>      <chr>           \n1 2011-08-03 hello      August 3 2011   \n2 2011-11-15 still here November 15 2011\n3 2012-02-01 goodbye    February 1 2012 \n```\n\n\n:::\n:::\n\n\n\n\n- Month, day,  year in that order.\n\n## so interpret as such\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(ddd %>% mutate(date2 = mdy(dunno)) -> d4)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"date\"],\"name\":[1],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"status\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"dunno\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"date2\"],\"name\":[4],\"type\":[\"date\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2011-08-03\",\"2\":\"hello\",\"3\":\"August 3 2011\",\"4\":\"2011-08-03\"},{\"1\":\"2011-11-15\",\"2\":\"still here\",\"3\":\"November 15 2011\",\"4\":\"2011-11-15\"},{\"1\":\"2012-02-01\",\"2\":\"goodbye\",\"3\":\"February 1 2012\",\"4\":\"2012-02-01\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n## Are they really the same? \n\n- Column `date2` was correctly converted from column `dunno`: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd4 %>% mutate(equal = identical(date, date2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  date       status     dunno            date2      equal\n  <date>     <chr>      <chr>            <date>     <lgl>\n1 2011-08-03 hello      August 3 2011    2011-08-03 TRUE \n2 2011-11-15 still here November 15 2011 2011-11-15 TRUE \n3 2012-02-01 goodbye    February 1 2012  2012-02-01 TRUE \n```\n\n\n:::\n:::\n\n\n\n\n- The two columns of dates are all the same.\n\n## Making dates from pieces\nStarting from this file:\n\n```\nyear month day\n1970 1 1\n2007 9 4\n1940 4 15\n```\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/pieces.txt\"\ndates0 <- read_delim(my_url, \" \")\n```\n:::\n\n\n\n\n## Making some dates \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndates0\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"year\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"month\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"day\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1970\",\"2\":\"1\",\"3\":\"1\"},{\"1\":\"2007\",\"2\":\"9\",\"3\":\"4\"},{\"1\":\"1940\",\"2\":\"4\",\"3\":\"15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\ndates0 %>%\n  unite(dates, day, month, year) %>%\n  mutate(d = dmy(dates)) -> newdates\n```\n:::\n\n\n\n\n\n## The results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdates\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dates\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"d\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1_1_1970\",\"2\":\"1970-01-01\"},{\"1\":\"4_9_2007\",\"2\":\"2007-09-04\"},{\"1\":\"15_4_1940\",\"2\":\"1940-04-15\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n- `unite` glues things together with an underscore between them (if you\ndon’t specify anything else). Syntax: first thing is new column to be\ncreated, other columns are what to make it out of.\n- `unite` makes the original variable columns year, month, day\n*disappear*.\n- The column `dates` is text, while `d` is a real date.\n\n## Extracting information from dates \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnewdates %>%\n  mutate(\n    mon = month(d),\n    day = day(d),\n    weekday = wday(d, label = TRUE)\n  )\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dates\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"d\"],\"name\":[2],\"type\":[\"date\"],\"align\":[\"right\"]},{\"label\":[\"mon\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"day\"],\"name\":[4],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"weekday\"],\"name\":[5],\"type\":[\"ord\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1_1_1970\",\"2\":\"1970-01-01\",\"3\":\"1\",\"4\":\"1\",\"5\":\"Thu\"},{\"1\":\"4_9_2007\",\"2\":\"2007-09-04\",\"3\":\"9\",\"4\":\"4\",\"5\":\"Tue\"},{\"1\":\"15_4_1940\",\"2\":\"1940-04-15\",\"3\":\"4\",\"4\":\"15\",\"5\":\"Mon\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Dates and times\n- Standard format for times is to put the time after the date, hours,\nminutes, seconds:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(dd <- tibble(text = c(\n  \"1970-01-01 07:50:01\", \"2007-09-04 15:30:00\",\n  \"1940-04-15 06:45:10\", \"2016-02-10 12:26:40\"\n)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 1\n  text               \n  <chr>              \n1 1970-01-01 07:50:01\n2 2007-09-04 15:30:00\n3 1940-04-15 06:45:10\n4 2016-02-10 12:26:40\n```\n\n\n:::\n:::\n\n\n\n\n## Converting text to date-times: \n\n- Then get from this text using `ymd_hms`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>% mutate(dt = ymd_hms(text)) %>% pull(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1970-01-01 07:50:01 UTC\" \"2007-09-04 15:30:00 UTC\"\n[3] \"1940-04-15 06:45:10 UTC\" \"2016-02-10 12:26:40 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## Timezones\n\n- Default timezone is “Universal Coordinated Time”. Change it via `tz=`\nand the name of a timezone: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>% \n  mutate(dt = ymd_hms(text, tz = \"America/Toronto\")) -> dd\ndd %>% mutate(zone = tz(dt))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"text\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"dt\"],\"name\":[2],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"zone\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"1970-01-01 07:50:01\",\"2\":\"1970-01-01 07:50:01\",\"3\":\"America/Toronto\"},{\"1\":\"2007-09-04 15:30:00\",\"2\":\"2007-09-04 15:30:00\",\"3\":\"America/Toronto\"},{\"1\":\"1940-04-15 06:45:10\",\"2\":\"1940-04-15 06:45:10\",\"3\":\"America/Toronto\"},{\"1\":\"2016-02-10 12:26:40\",\"2\":\"2016-02-10 12:26:40\",\"3\":\"America/Toronto\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Finding a timezone name\n\n- Use `OlsonNames()`. Some of them:\n\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(OlsonNames(), 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Europe/Monaco\"    \"Africa/Bamako\"   \n [3] \"America/Nome\"     \"America/Santarem\"\n [5] \"America/Detroit\"  \"Etc/GMT+9\"       \n [7] \"Europe/Brussels\"  \"Africa/Ndjamena\" \n [9] \"Asia/Dubai\"       \"Etc/GMT-13\"      \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Extracting time parts\n- As you would expect: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>%\n  select(-text) %>%\n  mutate(\n    h = hour(dt), sec = second(dt),\n    min = minute(dt), zone = tz(dt)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  dt                      h   sec   min zone           \n  <dttm>              <int> <dbl> <int> <chr>          \n1 1970-01-01 07:50:01     7     1    50 America/Toronto\n2 2007-09-04 15:30:00    15     0    30 America/Toronto\n3 1940-04-15 06:45:10     6    10    45 America/Toronto\n4 2016-02-10 12:26:40    12    40    26 America/Toronto\n```\n\n\n:::\n:::\n\n\n\n\n## Same times, but different time zone: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>%\n  select(dt) %>%\n  mutate(oz = with_tz(dt, \"Australia/Sydney\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"dt\"],\"name\":[1],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"oz\"],\"name\":[2],\"type\":[\"dttm\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1970-01-01 07:50:01\",\"2\":\"1970-01-01 22:50:01\"},{\"1\":\"2007-09-04 15:30:00\",\"2\":\"2007-09-05 05:30:00\"},{\"1\":\"1940-04-15 06:45:10\",\"2\":\"1940-04-15 21:45:10\"},{\"1\":\"2016-02-10 12:26:40\",\"2\":\"2016-02-11 04:26:40\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## In more detail \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd %>%\n  mutate(oz = with_tz(dt, \"Australia/Sydney\")) %>%\n  pull(oz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1970-01-01 22:50:01 AEST\" \"2007-09-05 05:30:00 AEST\"\n[3] \"1940-04-15 21:45:10 AEST\" \"2016-02-11 04:26:40 AEDT\"\n```\n\n\n:::\n:::\n\n\n\n\n\"Australian Eastern Time\", Standard or Daylight. Note when the Australian summer is.\n\n\n## How long between date-times?\n\n- We may need to calculate the time between two events. For example,\nthese are the dates and times that some patients were admitted to\nand discharged from a hospital:\n\n```\nadmit,discharge\n1981-12-10 22:00:00,1982-01-03 14:00:00\n2014-03-07 14:00:00,2014-03-08 09:30:00\n2016-08-31 21:00:00,2016-09-02 17:00:00\n```\n\n## Do they get read in as date-times? \n\n- These ought to get read in and converted to date-times:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/hospital.csv\"\nstays <- read_csv(my_url)\nstays\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"admit\"],\"name\":[1],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"discharge\"],\"name\":[2],\"type\":[\"dttm\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1981-12-10 22:00:00\",\"2\":\"1982-01-03 14:00:00\"},{\"1\":\"2014-03-07 14:00:00\",\"2\":\"2014-03-08 09:30:00\"},{\"1\":\"2016-08-31 21:00:00\",\"2\":\"2016-09-02 17:00:00\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n-  and so it proves.\n\n## Subtracting the date-times\n\n- In the obvious way, this gets us an answer:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = discharge - admit)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"admit\"],\"name\":[1],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"discharge\"],\"name\":[2],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"stay\"],\"name\":[3],\"type\":[\"drtn\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1981-12-10 22:00:00\",\"2\":\"1982-01-03 14:00:00\",\"3\":\"568.0 hours\"},{\"1\":\"2014-03-07 14:00:00\",\"2\":\"2014-03-08 09:30:00\",\"3\":\"19.5 hours\"},{\"1\":\"2016-08-31 21:00:00\",\"2\":\"2016-09-02 17:00:00\",\"3\":\"44.0 hours\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n- Number of hours; hard to interpret. \n\n## Days\n\n- Fractional number of days would\nbe better: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% \n  mutate(\n    stay_days = as.period(admit %--% discharge) / days(1))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"admit\"],\"name\":[1],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"discharge\"],\"name\":[2],\"type\":[\"dttm\"],\"align\":[\"right\"]},{\"label\":[\"stay_days\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1981-12-10 22:00:00\",\"2\":\"1982-01-03 14:00:00\",\"3\":\"23.666667\"},{\"1\":\"2014-03-07 14:00:00\",\"2\":\"2014-03-08 09:30:00\",\"3\":\"0.812500\"},{\"1\":\"2016-08-31 21:00:00\",\"2\":\"2016-09-02 17:00:00\",\"3\":\"1.833333\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Completed days\n\n- Pull out with `day()` etc, as for a date-time:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% \n  mutate(\n    stay = as.period(admit %--% discharge),\n    stay_days = day(stay),\n    stay_hours = hour(stay)\n    ) %>%\n  select(starts_with(\"stay\"))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"stay\"],\"name\":[1],\"type\":[\"Period\"],\"align\":[\"right\"]},{\"label\":[\"stay_days\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"stay_hours\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"23d 16H 0M 0S\",\"2\":\"23\",\"3\":\"16\"},{\"1\":\"19H 30M 0S\",\"2\":\"0\",\"3\":\"19\"},{\"1\":\"1d 20H 0M 0S\",\"2\":\"1\",\"3\":\"20\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n## Comments\n- Date-times are stored internally as seconds-since-something, so that\nsubtracting two of them will give, internally, a number of seconds.\n- Just subtracting the date-times is displayed as a time (in units that R\nchooses for us).\n- Convert to fractional times via a \"period\", then divide by `days(1)`, `months(1)` etc.\n- These ideas useful for calculating time from a start point until an event\nhappens (in this case, a patient being discharged from hospital).\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"dates_and_times_files/libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"dates_and_times_files/libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}