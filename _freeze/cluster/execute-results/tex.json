{
  "hash": "462cd8f45d6676244c1c4dc70ec2be57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cluster analysis\"\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n## Cluster Analysis\n\n-   One side-effect of discriminant analysis: could draw picture of data\n    (if 1st 2s `LD`s told most of story) and see which individuals\n    \"close\" to each other.\n\n-   Discriminant analysis requires knowledge of groups.\n\n-   Without knowledge of groups, use *cluster analysis*: see which\n    individuals close together, which groups suggested by data.\n\n-   Idea: see how individuals group into \"clusters\" of nearby\n    individuals.\n\n-   Base on \"dissimilarities\" between individuals.\n\n-   Or base on standard deviations and correlations between variables\n    (assesses dissimilarity behind scenes).\n\n## Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS) # for lda later\nlibrary(tidyverse)\nlibrary(spatstat) # for crossdist later\nlibrary(ggrepel)\nlibrary(conflicted)\nconflict_prefer(\"select\", \"dplyr\")\nconflict_prefer(\"filter\", \"dplyr\")\n```\n:::\n\n\n\n\n## One to ten in 11 languages\n\n|     | English | Norwegian | Danish | Dutch | German |\n|-----|---------|-----------|--------|-------|--------|\n| 1   | one     | en        | en     | een   | eins   |\n| 2   | two     | to        | to     | twee  | zwei   |\n| 3   | three   | tre       | tre    | drie  | drei   |\n| 4   | four    | fire      | fire   | vier  | vier   |\n| 5   | five    | fem       | fem    | vijf  | funf   |\n| 6   | six     | seks      | seks   | zes   | sechs  |\n| 7   | seven   | sju       | syv    | zeven | sieben |\n| 8   | eight   | atte      | otte   | acht  | acht   |\n| 9   | nine    | ni        | ni     | negen | neun   |\n| 10  | ten     | ti        | ti     | tien  | zehn   |\n\n## One to ten {.smaller}\n\n|     | French | Spanish | Italian | Polish   | Hungarian | Finnish   |\n|-----|--------|---------|---------|----------|-----------|-----------|\n| 1   | un     | uno     | uno     | jeden    | egy       | yksi      |\n| 2   | deux   | dos     | due     | dwa      | ketto     | kaksi     |\n| 3   | trois  | tres    | tre     | trzy     | harom     | kolme     |\n| 4   | quatre | cuatro  | quattro | cztery   | negy      | nelja     |\n| 5   | cinq   | cinco   | cinque  | piec     | ot        | viisi     |\n| 6   | six    | seis    | sei     | szesc    | hat       | kuusi     |\n| 7   | sept   | siete   | sette   | siedem   | het       | seitseman |\n| 8   | huit   | ocho    | otto    | osiem    | nyolc     | kahdeksan |\n| 9   | neuf   | nueve   | nove    | dziewiec | kilenc    | yhdeksan  |\n| 10  | dix    | diez    | dieci   | dziesiec | tiz       | kymmenen  |\n\n## Dissimilarities and languages example\n\n-   Can define dissimilarities how you like (whatever makes sense in\n    application).\n\n-   Sometimes defining \"similarity\" makes more sense; can turn this into\n    dissimilarity by subtracting from some maximum.\n\n-   Example: numbers 1--10 in various European languages. Define\n    similarity between two languages by counting how often the same\n    number has a name starting with the same letter (and dissimilarity\n    by how often number has names starting with different letter).\n\n-   Crude (doesn't even look at most of the words), but see how\n    effective.\n\n## Two kinds of cluster analysis\n\n-   Looking at process of forming clusters (of similar languages):\n    **hierarchical cluster analysis** (`hclust`).\n\n-   Start with each individual in cluster by itself.\n\n-   Join \"closest\" clusters one by one until all individuals in one\n    cluster.\n\n-   How to define closeness of two *clusters*? Not obvious, investigate\n    in a moment.\n\n-   Know how many clusters: which division into that many clusters is\n    \"best\" for individuals? **K-means clustering** (`kmeans`).\n\n## Two made-up clusters\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-2-1.pdf)\n:::\n:::\n\n\n\n\nHow to measure distance between set of red points and set of blue ones?\n\n## Single-linkage distance\n\nFind the red point and the blue point that are closest together:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-3-1.pdf)\n:::\n:::\n\n\n\n\nSingle-linkage distance between 2 clusters is distance between their\nclosest points.\n\n## Complete linkage\n\nFind the red and blue points that are farthest apart:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-4-1.pdf)\n:::\n:::\n\n\n\n\nComplete-linkage distance is distance between farthest points.\n\n## Ward's method\n\nWork out mean of each cluster and join point to its mean:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-5-1.pdf)\n:::\n:::\n\n\n\n\nWork out (i) sum of squared distances of points from means.\n\n## Ward's method part 2\n\nNow imagine combining the two clusters and working out overall mean.\nJoin each point to this mean:\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-6-1.pdf)\n:::\n:::\n\n\n\n\nCalc sum of squared distances (ii) of points to combined mean.\n\n## Ward's method part 3\n\n-   Sum of squares (ii) will be bigger than (i) (points closer to own\n    cluster mean than combined mean).\n\n-   Ward's distance is (ii) minus (i).\n\n-   Think of as \"cost\" of combining clusters:\n\n-   if clusters close together, (ii) only a little larger than (i)\n\n-   if clusters far apart, (ii) a lot larger than (i) (as in example).\n\n## Hierarchical clustering revisited\n\n-   Single linkage, complete linkage, Ward are ways of measuring\n    closeness of clusters.\n\n-   Use them, starting with each observation in own cluster, to\n    repeatedly combine two closest clusters until all points in one\n    cluster.\n\n-   They will give different answers (clustering stories).\n\n-   Single linkage tends to make \"stringy\" clusters because clusters can\n    be very different apart from two closest points.\n\n-   Complete linkage insists on whole clusters being similar.\n\n-   Ward tends to form many small clusters first.\n\n## Dissimilarity data in R\n\nDissimilarities for language data were how many number names had\n*different* first letter:\n\n\n\n\n\n\n\n\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/languages.txt\"\n(number.d <- read_table(my_url))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 x 12\n   la       en    no    dk    nl    de    fr    es    it\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 en        0     2     2     7     6     6     6     6\n 2 no        2     0     1     5     4     6     6     6\n 3 dk        2     1     0     6     5     6     5     5\n 4 nl        7     5     6     0     5     9     9     9\n 5 de        6     4     5     5     0     7     7     7\n 6 fr        6     6     6     9     7     0     2     1\n 7 es        6     6     5     9     7     2     0     1\n 8 it        6     6     5     9     7     1     1     0\n 9 pl        7     7     6    10     8     5     3     4\n10 hu        9     8     8     8     9    10    10    10\n11 fi        9     9     9     9     9     9     9     8\n# i 3 more variables: pl <dbl>, hu <dbl>, fi <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Making a distance object\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumber.d %>%\n  select(-la) %>%\n  as.dist() -> d\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   en no dk nl de fr es it pl hu\nno  2                           \ndk  2  1                        \nnl  7  5  6                     \nde  6  4  5  5                  \nfr  6  6  6  9  7               \nes  6  6  5  9  7  2            \nit  6  6  5  9  7  1  1         \npl  7  7  6 10  8  5  3  4      \nhu  9  8  8  8  9 10 10 10 10   \nfi  9  9  9  9  9  9  9  8  9  8\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"dist\"\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Cluster analysis and dendrogram\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd.hc <- hclust(d, method = \"single\")\nplot(d.hc)\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Comments\n\n-   Tree shows how languages combined into clusters.\n\n-   First (bottom), Spanish, French, Italian joined into one cluster,\n    Norwegian and Danish into another.\n\n-   Later, English joined to Norse languages, Polish to Romance group.\n\n-   Then German, Dutch make a Germanic group.\n\n-   Finally, Hungarian and Finnish joined to each other and everything\n    else.\n\n## Clustering process 1/2\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenframe(d.hc$labels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 x 2\n    name value\n   <int> <chr>\n 1     1 en   \n 2     2 no   \n 3     3 dk   \n 4     4 nl   \n 5     5 de   \n 6     6 fr   \n 7     7 es   \n 8     8 it   \n 9     9 pl   \n10    10 hu   \n11    11 fi   \n```\n\n\n:::\n:::\n\n\n\n\n## Clustering process 2/2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd.hc$merge\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      [,1] [,2]\n [1,]   -2   -3\n [2,]   -6   -8\n [3,]   -7    2\n [4,]   -1    1\n [5,]   -9    3\n [6,]   -5    4\n [7,]   -4    6\n [8,]    5    7\n [9,]  -10    8\n[10,]  -11    9\n```\n\n\n:::\n:::\n\n\n\n\n## Comments\n\n-   Lines of `merge` show what was combined\n\n    -   First, languages 2 and 3 (`no` and `dk`)\n\n    -   Then languages 6 and 8 (`fr` and `it`)\n\n    -   Then #7 combined with cluster formed at step 2 (`es` joined to\n        `fr` and `it`).\n\n    -   Then `en` joined to `no` and `dk` \\ldots\n\n    -   Finally `fi` joined to all others.\n\n## Complete linkage\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd.hc <- hclust(d, method = \"complete\")\nplot(d.hc)\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Ward\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd.hc <- hclust(d, method = \"ward.D\")\nplot(d.hc)\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/wardo-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Chopping the tree\n\n-   Three clusters (from Ward) looks good:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncutree(d.hc, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nen no dk nl de fr es it pl hu fi \n 1  1  1  1  1  2  2  2  2  3  3 \n```\n\n\n:::\n:::\n\n\n\n\n## Turning the \"named vector\" into a data frame\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncutree(d.hc, 3) %>% enframe(name=\"country\", value=\"cluster\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 x 2\n   country cluster\n   <chr>     <int>\n 1 en            1\n 2 no            1\n 3 dk            1\n 4 nl            1\n 5 de            1\n 6 fr            2\n 7 es            2\n 8 it            2\n 9 pl            2\n10 hu            3\n11 fi            3\n```\n\n\n:::\n:::\n\n\n\n\n\\scriptsize\n\n## Drawing those clusters on the tree\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(d.hc)\nrect.hclust(d.hc, 3)\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/asfsagd-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Comparing single-linkage and Ward\n\n-   In Ward, Dutch and German get joined earlier (before joining to\n    Germanic cluster).\n\n-   Also Hungarian and Finnish get combined earlier.\n\n## Making those dissimilarities\n\nOriginal data:\n\n\\tiny\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/one-ten.txt\"\nlang <- read_delim(my_url, \" \")\nlang\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 11\n   en    no    dk    nl    de     fr     es     it     pl   \n   <chr> <chr> <chr> <chr> <chr>  <chr>  <chr>  <chr>  <chr>\n 1 one   en    en    een   eins   un     uno    uno    jeden\n 2 two   to    to    twee  zwei   deux   dos    due    dwa  \n 3 three tre   tre   drie  drei   trois  tres   tre    trzy \n 4 four  fire  fire  vier  vier   quatre cuatro quatt~ czte~\n 5 five  fem   fem   vijf  funf   cinq   cinco  cinque piec \n 6 six   seks  seks  zes   sechs  six    seis   sei    szesc\n 7 seven sju   syv   zeven sieben sept   siete  sette  sied~\n 8 eight atte  otte  acht  acht   huit   ocho   otto   osiem\n 9 nine  ni    ni    negen neun   neuf   nueve  nove   dzie~\n10 ten   ti    ti    tien  zehn   dix    diez   dieci  dzie~\n# i 2 more variables: hu <chr>, fi <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\nIt would be a lot easier to extract the first letter if the number names\nwere all in one column.\n\n## Tidy, and extract first letter\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlang %>% mutate(number=row_number()) %>%\n    pivot_longer(-number, names_to=\"language\", values_to=\"name\") %>%\n    mutate(first=str_sub(name, 1, 1)) -> lang.long\nlang.long \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 110 x 4\n   number language name  first\n    <int> <chr>    <chr> <chr>\n 1      1 en       one   o    \n 2      1 no       en    e    \n 3      1 dk       en    e    \n 4      1 nl       een   e    \n 5      1 de       eins  e    \n 6      1 fr       un    u    \n 7      1 es       uno   u    \n 8      1 it       uno   u    \n 9      1 pl       jeden j    \n10      1 hu       egy   e    \n# i 100 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Calculating dissimilarity\n\n-   Suppose we wanted dissimilarity between English and Norwegian. It's\n    the number of first letters that are different.\n\n-   First get the lines for English:\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenglish <- lang.long %>% filter(language == \"en\")\nenglish\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 4\n   number language name  first\n    <int> <chr>    <chr> <chr>\n 1      1 en       one   o    \n 2      2 en       two   t    \n 3      3 en       three t    \n 4      4 en       four  f    \n 5      5 en       five  f    \n 6      6 en       six   s    \n 7      7 en       seven s    \n 8      8 en       eight e    \n 9      9 en       nine  n    \n10     10 en       ten   t    \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## And then the lines for Norwegian\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnorwegian <- lang.long %>% filter(language == \"no\")\nnorwegian\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 4\n   number language name  first\n    <int> <chr>    <chr> <chr>\n 1      1 no       en    e    \n 2      2 no       to    t    \n 3      3 no       tre   t    \n 4      4 no       fire  f    \n 5      5 no       fem   f    \n 6      6 no       seks  s    \n 7      7 no       sju   s    \n 8      8 no       atte  a    \n 9      9 no       ni    n    \n10     10 no       ti    t    \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\nAnd now we want to put them side by side, matched by number. This is\nwhat `left_join` does. (A \"join\" is a lookup of values in one table\nusing another.)\n\n## The join\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenglish %>% left_join(norwegian, join_by(number))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 7\n   number language.x name.x first.x language.y name.y first.y\n    <int> <chr>      <chr>  <chr>   <chr>      <chr>  <chr>  \n 1      1 en         one    o       no         en     e      \n 2      2 en         two    t       no         to     t      \n 3      3 en         three  t       no         tre    t      \n 4      4 en         four   f       no         fire   f      \n 5      5 en         five   f       no         fem    f      \n 6      6 en         six    s       no         seks   s      \n 7      7 en         seven  s       no         sju    s      \n 8      8 en         eight  e       no         atte   a      \n 9      9 en         nine   n       no         ni     n      \n10     10 en         ten    t       no         ti     t      \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n`first.x` is 1st letter of English word, `first.y` 1st letter of\nNorwegian word.\n\n## Counting the different ones\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenglish %>% left_join(norwegian, join_by(number)) %>% \n  count(different=(first.x != first.y)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 2\n  different     n\n  <lgl>     <int>\n1 FALSE         8\n2 TRUE          2\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\nor\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenglish %>% left_join(norwegian, join_by(number)) %>% \n  count(different=(first.x != first.y)) %>% \n  filter(different) %>% pull(n) -> ans\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\nWords for 1 and 8 start with different letter; rest are same.\n\n## A language with itself\n\nThe answer should be zero:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nenglish %>% left_join(english, join_by(number)) %>% \n  count(different=(first.x != first.y)) %>% \n  filter(different) %>% pull(n) -> ans\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ninteger(0)\n```\n\n\n:::\n:::\n\n\n\n\n-   but this is \"an integer vector of length zero\".\n-   so we have to allow for this possibility when we write a function to\n    do it.\n\n## Function to do this for any two languages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountdiff <- function(lang.1, lang.2, d) {\n  d %>% filter(language == lang.1) -> lang1d\n  d %>% filter(language == lang.2) -> lang2d\n  lang1d %>%\n    left_join(lang2d, join_by(number)) %>%\n    count(different = (first.x != first.y)) %>%\n    filter(different) %>% pull(n) -> ans\n  # if ans has length zero, set answer to (integer) zero.\n  ifelse(length(ans)==0, 0L, ans) \n}\n```\n:::\n\n\n\n\n## Testing\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountdiff(\"en\", \"no\", lang.long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\ncountdiff(\"en\", \"en\", lang.long)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nEnglish and Norwegian have two different; English and English have none\ndifferent.\n\nCheck.\n\n## For all pairs of languages?\n\n-   First need all the languages:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlanguages <- names(lang)\nlanguages\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"en\" \"no\" \"dk\" \"nl\" \"de\" \"fr\" \"es\" \"it\" \"pl\"\n[10] \"hu\" \"fi\"\n```\n\n\n:::\n:::\n\n\n\n\n-   and then all *pairs* of languages:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs <- crossing(lang = languages, lang2 = languages) \n```\n:::\n\n\n\n\n## The pairs\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 121 x 2\n   lang  lang2\n   <chr> <chr>\n 1 de    de   \n 2 de    dk   \n 3 de    en   \n 4 de    es   \n 5 de    fi   \n 6 de    fr   \n 7 de    hu   \n 8 de    it   \n 9 de    nl   \n10 de    no   \n# i 111 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Run `countdiff` for all those language pairs\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs %>% rowwise() %>% \n  mutate(diff = countdiff(lang, lang2, lang.long)) -> thediff\nthediff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 121 x 3\n# Rowwise: \n   lang  lang2  diff\n   <chr> <chr> <int>\n 1 de    de        0\n 2 de    dk        5\n 3 de    en        6\n 4 de    es        7\n 5 de    fi        9\n 6 de    fr        7\n 7 de    hu        9\n 8 de    it        7\n 9 de    nl        5\n10 de    no        4\n# i 111 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Make square table of these\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthediff %>% pivot_wider(names_from=lang2, values_from=diff)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 x 12\n   lang     de    dk    en    es    fi    fr    hu    it\n   <chr> <int> <int> <int> <int> <int> <int> <int> <int>\n 1 de        0     5     6     7     9     7     9     7\n 2 dk        5     0     2     5     9     6     8     5\n 3 en        6     2     0     6     9     6     9     6\n 4 es        7     5     6     0     9     2    10     1\n 5 fi        9     9     9     9     0     9     8     9\n 6 fr        7     6     6     2     9     0    10     1\n 7 hu        9     8     9    10     8    10     0    10\n 8 it        7     5     6     1     9     1    10     0\n 9 nl        5     6     7     9     9     9     8     9\n10 no        4     1     2     6     9     6     8     6\n11 pl        8     6     7     3     9     5    10     4\n# i 3 more variables: nl <int>, no <int>, pl <int>\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\nand that was where we began.\n\n## Another example\n\nBirth, death and infant mortality rates for 97 countries (variables not\ndissimilarities):\n\n```         \n24.7  5.7  30.8 Albania         12.5 11.9  14.4 Bulgaria\n13.4 11.7  11.3 Czechoslovakia  12   12.4   7.6 Former_E._Germany\n11.6 13.4  14.8 Hungary         14.3 10.2    16 Poland\n13.6 10.7  26.9 Romania           14    9  20.2 Yugoslavia\n17.7   10    23 USSR            15.2  9.5  13.1 Byelorussia_SSR\n13.4 11.6    13 Ukrainian_SSR   20.7  8.4  25.7 Argentina\n46.6   18   111 Bolivia         28.6  7.9    63 Brazil\n23.4  5.8  17.1 Chile           27.4  6.1    40 Columbia\n32.9  7.4    63 Ecuador         28.3  7.3    56 Guyana\n...\n```\n\n-   Want to find groups of similar countries (and how many groups, which\n    countries in each group).\n\n-   Tree would be unwieldy with 97 countries.\n\n-   More automatic way of finding given number of clusters?\n\n## Reading in\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"http://ritsokiguess.site/datafiles/birthrate.txt\"\nvital <- read_table(url)\nvital\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 97 x 4\n   birth death infant country       \n   <dbl> <dbl>  <dbl> <chr>         \n 1  24.7   5.7   30.8 Albania       \n 2  13.4  11.7   11.3 Czechoslovakia\n 3  11.6  13.4   14.8 Hungary       \n 4  13.6  10.7   26.9 Romania       \n 5  17.7  10     23   USSR          \n 6  13.4  11.6   13   Ukrainian_SSR \n 7  46.6  18    111   Bolivia       \n 8  23.4   5.8   17.1 Chile         \n 9  32.9   7.4   63   Ecuador       \n10  34.8   6.6   42   Paraguay      \n# i 87 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Standardizing\n\n-   Infant mortality rate numbers bigger than others, consequence of\n    measurement scale (arbitrary).\n\n-   Standardize (numerical) columns of data frame to have mean 0, SD 1,\n    done by `scale`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital %>% \n  mutate(across(where(is.numeric), \\(x) scale(x))) -> vital.s\nvital.s\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 97 x 4\n   birth[,1] death[,1] infant[,1] country       \n       <dbl>     <dbl>      <dbl> <chr>         \n 1    -0.334   -1.11       -0.524 Albania       \n 2    -1.17     0.186      -0.948 Czechoslovakia\n 3    -1.30     0.552      -0.872 Hungary       \n 4    -1.15    -0.0293     -0.609 Romania       \n 5    -0.851   -0.180      -0.694 USSR          \n 6    -1.17     0.164      -0.911 Ukrainian_SSR \n 7     1.28     1.54        1.22  Bolivia       \n 8    -0.430   -1.08       -0.822 Chile         \n 9     0.271   -0.739       0.176 Ecuador       \n10     0.411   -0.911      -0.281 Paraguay      \n# i 87 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Three clusters\n\nPretend we know 3 clusters is good. Take off the column of countries,\nand run `kmeans` on the resulting data frame, asking for 3 clusters:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.s %>% select(-country) %>% \n  kmeans(3) -> vital.km3\nvital.km3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nK-means clustering with 3 clusters of sizes 40, 25, 32\n\nCluster means:\n       birth      death      infant\n1 -1.0376994 -0.3289046 -0.90669032\n2  1.1780071  1.3323130  1.32732200\n3  0.3768062 -0.6297388  0.09639258\n\nClustering vector:\n [1] 3 1 1 1 1 1 2 1 3 3 1 2 1 1 1 1 1 1 1 1 1 2 2 1 3 3 3 2\n[29] 1 3 1 3 3 1 1 3 3 3 2 2 3 3 2 2 3 2 2 2 3 1 1 1 1 1 1 3\n[57] 3 3 3 3 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 1 2 1 3 3 2 3 1 3\n[85] 2 2 2 2 3 2 2 2 2 2 3 2 2\n\nWithin cluster sum of squares by cluster:\n[1] 17.21617 28.32560 21.53020\n (between_SS / total_SS =  76.7 %)\n\nAvailable components:\n\n[1] \"cluster\"      \"centers\"      \"totss\"       \n[4] \"withinss\"     \"tot.withinss\" \"betweenss\"   \n[7] \"size\"         \"iter\"         \"ifault\"      \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(vital.km3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cluster\"      \"centers\"      \"totss\"       \n[4] \"withinss\"     \"tot.withinss\" \"betweenss\"   \n[7] \"size\"         \"iter\"         \"ifault\"      \n```\n\n\n:::\n:::\n\n\n\n\nA lot of output, so look at these individually.\n\n## What's in the output?\n\n-   Cluster sizes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.km3$size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 40 25 32\n```\n\n\n:::\n:::\n\n\n\n\n-   Cluster centres:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.km3$centers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       birth      death      infant\n1 -1.0376994 -0.3289046 -0.90669032\n2  1.1780071  1.3323130  1.32732200\n3  0.3768062 -0.6297388  0.09639258\n```\n\n\n:::\n:::\n\n\n\n\n-   Cluster 1 has lower than average rates on everything; cluster 2 has\n    much higher than average.\n\n## Cluster sums of squares and membership\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.km3$withinss\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17.21617 28.32560 21.53020\n```\n\n\n:::\n:::\n\n\n\n\nCluster 1 compact relative to others (countries in cluster 1 more\nsimilar).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.km3$cluster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 3 1 1 1 1 1 2 1 3 3 1 2 1 1 1 1 1 1 1 1 1 2 2 1 3 3 3 2\n[29] 1 3 1 3 3 1 1 3 3 3 2 2 3 3 2 2 3 2 2 2 3 1 1 1 1 1 1 3\n[57] 3 3 3 3 1 1 1 1 1 1 1 1 1 1 3 3 3 3 3 1 2 1 3 3 2 3 1 3\n[85] 2 2 2 2 3 2 2 2 2 2 3 2 2\n```\n\n\n:::\n:::\n\n\n\n\nThe cluster membership for each of the 97 countries.\n\n## Store countries and clusters to which they belong\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.3 <- tibble(\n  country = vital.s$country,\n  cluster = vital.km3$cluster\n)\nvital.3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 97 x 2\n   country        cluster\n   <chr>            <int>\n 1 Albania              3\n 2 Czechoslovakia       1\n 3 Hungary              1\n 4 Romania              1\n 5 USSR                 1\n 6 Ukrainian_SSR        1\n 7 Bolivia              2\n 8 Chile                1\n 9 Ecuador              3\n10 Paraguay             3\n# i 87 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Which countries in which cluster? \n\nWrite function to extract cluster  number `i` from dataframe `d` with a column called `country`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries <- function(i, d) {\n  d %>% filter(cluster == i) %>% pull(country)\n}\n```\n:::\n\n\n\n\n## Cluster membership: cluster 2\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(2, vital.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bolivia\"      \"Mexico\"       \"Afghanistan\" \n [4] \"Iran\"         \"Bangladesh\"   \"Gabon\"       \n [7] \"Ghana\"        \"Namibia\"      \"Sierra_Leone\"\n[10] \"Swaziland\"    \"Uganda\"       \"Zaire\"       \n[13] \"Cambodia\"     \"Nepal\"        \"Angola\"      \n[16] \"Congo\"        \"Ethiopia\"     \"Gambia\"      \n[19] \"Malawi\"       \"Mozambique\"   \"Nigeria\"     \n[22] \"Somalia\"      \"Sudan\"        \"Tanzania\"    \n[25] \"Zambia\"      \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Cluster 3\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(3, vital.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Albania\"      \"Ecuador\"      \"Paraguay\"    \n [4] \"Kuwait\"       \"Oman\"         \"Turkey\"      \n [7] \"India\"        \"Mongolia\"     \"Pakistan\"    \n[10] \"Algeria\"      \"Botswana\"     \"Egypt\"       \n[13] \"Libya\"        \"Morocco\"      \"South_Africa\"\n[16] \"Zimbabwe\"     \"Brazil\"       \"Columbia\"    \n[19] \"Guyana\"       \"Peru\"         \"Venezuela\"   \n[22] \"Bahrain\"      \"Iraq\"         \"Jordan\"      \n[25] \"Lebanon\"      \"Saudi_Arabia\" \"Indonesia\"   \n[28] \"Malaysia\"     \"Philippines\"  \"Vietnam\"     \n[31] \"Kenya\"        \"Tunisia\"     \n```\n\n\n:::\n:::\n\n\n\n\n## Cluster 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(1, vital.3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Czechoslovakia\"       \"Hungary\"             \n [3] \"Romania\"              \"USSR\"                \n [5] \"Ukrainian_SSR\"        \"Chile\"               \n [7] \"Uruguay\"              \"Finland\"             \n [9] \"France\"               \"Greece\"              \n[11] \"Italy\"                \"Norway\"              \n[13] \"Spain\"                \"Switzerland\"         \n[15] \"Austria\"              \"Canada\"              \n[17] \"Israel\"               \"China\"               \n[19] \"Korea\"                \"Singapore\"           \n[21] \"Thailand\"             \"Bulgaria\"            \n[23] \"Former_E._Germany\"    \"Poland\"              \n[25] \"Yugoslavia\"           \"Byelorussia_SSR\"     \n[27] \"Argentina\"            \"Belgium\"             \n[29] \"Denmark\"              \"Germany\"             \n[31] \"Ireland\"              \"Netherlands\"         \n[33] \"Portugal\"             \"Sweden\"              \n[35] \"U.K.\"                 \"Japan\"               \n[37] \"U.S.A.\"               \"United_Arab_Emirates\"\n[39] \"Hong_Kong\"            \"Sri_Lanka\"           \n```\n\n\n:::\n:::\n\n\n\n\n## Problem!\n\n-   `kmeans` uses randomization. So result of one run might be different\n    from another run.\n\n-   Example: just run again on 3 clusters, `table` of results:\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.s %>% \n  select(-country) %>% kmeans(3) -> vital.km3a\ntable(\n  first = vital.km3$cluster,\n  second = vital.km3a$cluster\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     second\nfirst  1  2  3\n    1 40  0  0\n    2  0 24  1\n    3  4  0 28\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n-   Clusters are similar but *not same*.\n\n## Solution to this\n\n-   `nstart` option on `kmeans` runs that many times, takes best. Should\n    be same every time:\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.s %>%\n  select(-country) %>%\n  kmeans(3, nstart = 20) -> vital.km3b\n```\n:::\n\n\n\n\n\\normalsize\n\n## How many clusters?\n\n-   Three was just a guess.\n\n-   Idea: try a whole bunch of #clusters (say 2--20), obtain measure of\n    goodness of fit for each, make plot.\n\n-   Appropriate measure is `tot.withinss`.\n\n-   Run `kmeans` for each #clusters, get `tot.withinss` each time.\n\n## Function to get `tot.withinss`\n\n\\ldots for an input number of clusters, taking only numeric columns of\ninput data frame:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nss <- function(i, d) {\n  d %>%\n    select(where(is.numeric)) %>%\n    kmeans(i, nstart = 20) -> km\n  km$tot.withinss\n}\n```\n:::\n\n\n\n\nNote: writing function to be as general as possible, so that we can\nre-use it later.\n\n## Constructing within-cluster SS\n\nMake a data frame with desired numbers of clusters, and fill it with the\ntotal within-group sums of squares. `ss` expects a single number of\nclusters, not a vector of several, so run `rowwise`:\n\n\\normalsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(clusters = 2:20) %>%\n  rowwise() %>% \n  mutate(wss = ss(clusters, vital.s)) -> ssd\nssd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 x 2\n# Rowwise: \n   clusters    wss\n      <int>  <dbl>\n 1        2 117.  \n 2        3  66.9 \n 3        4  51.4 \n 4        5  37.5 \n 5        6  28.7 \n 6        7  24.7 \n 7        8  22.2 \n 8        9  19.8 \n 9       10  17.5 \n10       11  16.1 \n11       12  14.7 \n12       13  13.3 \n13       14  12.1 \n14       15  11.2 \n15       16  10.5 \n16       17   9.71\n17       18   8.98\n18       19   8.44\n19       20   7.97\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Scree plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ssd, aes(x = clusters, y = wss)) + geom_point() +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/favalli-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Interpreting scree plot\n\n-   Lower `wss` better.\n\n-   But lower for larger #clusters, harder to explain.\n\n-   Compromise: low-ish `wss` and low-ish #clusters.\n\n-   Look for \"elbow\" in plot.\n\n-   Idea: this is where `wss` decreases fast then slow.\n\n-   On our plot, small elbow at 6 clusters. Try this many clusters.\n\n## Six clusters, using `nstart`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(457299)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.s %>%\n  select(-country) %>%\n  kmeans(6, nstart = 20) -> vital.km6\nvital.km6$size\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 24 18 15  2  8 30\n```\n\n\n:::\n\n```{.r .cell-code}\nvital.km6$centers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       birth      death     infant\n1  0.4160993 -0.5169988  0.2648754\n2  1.2092406  0.7441347  1.0278003\n3 -0.4357690 -1.1438599 -0.7281108\n4 -0.2199722  2.1116577 -0.4544435\n5  1.3043848  2.1896567  1.9470306\n6 -1.1737104 -0.1856375 -0.9534370\n```\n\n\n:::\n:::\n\n\n\n\n## Make a data frame of countries and clusters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.6 <- tibble(\n  country = vital.s$country,\n  cluster = vital.km6$cluster\n)\nvital.6 %>% sample_n(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 2\n   country        cluster\n   <chr>            <int>\n 1 Ghana                2\n 2 Ukrainian_SSR        6\n 3 Ethiopia             5\n 4 Somalia              5\n 5 Oman                 1\n 6 Botswana             2\n 7 Paraguay             1\n 8 Czechoslovakia       6\n 9 Peru                 1\n10 Afghanistan          5\n```\n\n\n:::\n:::\n\n\n\n\n## Cluster 1\n\nBelow-average death rate, though other rates a little higher than\naverage:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(1, vital.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Ecuador\"      \"Paraguay\"     \"Oman\"        \n [4] \"Turkey\"       \"India\"        \"Mongolia\"    \n [7] \"Pakistan\"     \"Algeria\"      \"Egypt\"       \n[10] \"Libya\"        \"Morocco\"      \"South_Africa\"\n[13] \"Zimbabwe\"     \"Brazil\"       \"Guyana\"      \n[16] \"Peru\"         \"Iraq\"         \"Jordan\"      \n[19] \"Lebanon\"      \"Saudi_Arabia\" \"Indonesia\"   \n[22] \"Philippines\"  \"Vietnam\"      \"Tunisia\"     \n```\n\n\n:::\n:::\n\n\n\n\n## Cluster 2\n\nHigh on everything:\n\n\\normalsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(2, vital.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Bolivia\"    \"Iran\"       \"Bangladesh\" \"Botswana\"  \n [5] \"Gabon\"      \"Ghana\"      \"Namibia\"    \"Swaziland\" \n [9] \"Uganda\"     \"Zaire\"      \"Cambodia\"   \"Nepal\"     \n[13] \"Congo\"      \"Kenya\"      \"Nigeria\"    \"Sudan\"     \n[17] \"Tanzania\"   \"Zambia\"    \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Cluster 3\n\nLow on everything: \\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(3, vital.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Albania\"              \"Chile\"               \n [3] \"Israel\"               \"Kuwait\"              \n [5] \"China\"                \"Singapore\"           \n [7] \"Thailand\"             \"Argentina\"           \n [9] \"Columbia\"             \"Venezuela\"           \n[11] \"Bahrain\"              \"United_Arab_Emirates\"\n[13] \"Hong_Kong\"            \"Malaysia\"            \n[15] \"Sri_Lanka\"           \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Cluster 4\n\nVery high death rate, just below average on all else:\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(4, vital.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Mexico\" \"Korea\" \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Cluster 5\n\nVery high on everything:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(5, vital.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Afghanistan\"  \"Sierra_Leone\" \"Angola\"      \n[4] \"Ethiopia\"     \"Gambia\"       \"Malawi\"      \n[7] \"Mozambique\"   \"Somalia\"     \n```\n\n\n:::\n:::\n\n\n\n\n## Cluster 6\n\nA bit below average on everything:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_countries(6, vital.6)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Czechoslovakia\"    \"Hungary\"          \n [3] \"Romania\"           \"USSR\"             \n [5] \"Ukrainian_SSR\"     \"Uruguay\"          \n [7] \"Finland\"           \"France\"           \n [9] \"Greece\"            \"Italy\"            \n[11] \"Norway\"            \"Spain\"            \n[13] \"Switzerland\"       \"Austria\"          \n[15] \"Canada\"            \"Bulgaria\"         \n[17] \"Former_E._Germany\" \"Poland\"           \n[19] \"Yugoslavia\"        \"Byelorussia_SSR\"  \n[21] \"Belgium\"           \"Denmark\"          \n[23] \"Germany\"           \"Ireland\"          \n[25] \"Netherlands\"       \"Portugal\"         \n[27] \"Sweden\"            \"U.K.\"             \n[29] \"Japan\"             \"U.S.A.\"           \n```\n\n\n:::\n:::\n\n\n\n\n## Comparing our 3 and 6-cluster solutions\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(three = vital.km3$cluster, six = vital.km6$cluster)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     six\nthree  1  2  3  4  5  6\n    1  0  0  9  1  0 30\n    2  0 16  0  1  8  0\n    3 24  2  6  0  0  0\n```\n\n\n:::\n:::\n\n\n\n\nCompared to 3-cluster solution:\n\n-   most of (old) cluster 1 gone to (new) cluster 6\n\n-   Old cluster 2 split into new clusters 2 and 5 (two types of \"developing\"\n    countries)\n\n-   Old cluster 3 split into new clusters 1 and 3 (two types of \"intermediate\"\n    countries, divided by death rate).\n\n## Getting a picture from `kmeans`\n\n-   Use discriminant analysis on clusters found, treating them as\n    \"known\" groups.\n\n## Discriminant analysis\n\n-   So what makes the groups different?\n\n-   Uses package `MASS` (loaded):\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.lda <- lda(vital.km6$cluster ~ birth + death + infant, \n                 data = vital.s)\nvital.lda$svd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.687195  8.851811  1.773006\n```\n\n\n:::\n\n```{.r .cell-code}\nvital.lda$scaling\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             LD1        LD2        LD3\nbirth  2.6879695  1.1224202 -1.9483853\ndeath  0.6652712 -2.7213044 -0.6049358\ninfant 2.1111801  0.7650912  2.3542296\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n-   LD1 is some of everything (high=poor, low=rich).\n\n-   LD2 mainly death rate, high or low.\n\n## A data frame to make plot from\n\n-   Get predictions first:\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvital.pred <- predict(vital.lda)\nd <- data.frame(\n  country = vital.s$country,\n  cluster = vital.km6$cluster, \n  vital.pred$x\n)\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                country cluster         LD1\n1               Albania       3 -2.74034473\n2        Czechoslovakia       6 -5.01874312\n3               Hungary       6 -4.97189595\n4               Romania       6 -4.40612396\n5                  USSR       6 -3.87181416\n6         Ukrainian_SSR       6 -4.95502329\n7               Bolivia       2  7.04719692\n8                 Chile       3 -3.61284528\n9               Ecuador       1  0.60813286\n10             Paraguay       1 -0.09333631\n11              Uruguay       6 -3.92003877\n12               Mexico       4  1.17794263\n13              Finland       6 -5.53992595\n14               France       6 -5.48731510\n15               Greece       6 -6.04517374\n16                Italy       6 -6.23984314\n17               Norway       6 -5.14396822\n18                Spain       6 -6.20238403\n19          Switzerland       6 -5.70503604\n20              Austria       6 -5.48811665\n21               Canada       6 -5.61852237\n22          Afghanistan       5  9.15790453\n23                 Iran       2  5.17009665\n24               Israel       3 -4.09921633\n25               Kuwait       3 -3.52238895\n26                 Oman       1  2.12959716\n27               Turkey       1  0.61384977\n28           Bangladesh       2  6.18349326\n29                China       3 -3.23659422\n30                India       1  1.81800150\n31                Korea       4 -1.46967404\n32             Mongolia       1  1.67300272\n33             Pakistan       1  2.24428372\n34            Singapore       3 -5.25056428\n35             Thailand       3 -3.05879372\n36              Algeria       1  1.75779182\n37             Botswana       2  4.48834877\n38                Egypt       1  1.45515716\n39                Gabon       2  5.07955834\n40                Ghana       2  4.94529597\n41                Libya       1  3.96906505\n42              Morocco       1  2.33973207\n43              Namibia       2  6.78839862\n44         Sierra_Leone       5 10.11147508\n45         South_Africa       1  1.22038392\n46            Swaziland       2  6.62089564\n47               Uganda       2  7.44759122\n48                Zaire       2  5.01954548\n49             Zimbabwe       1  2.90708292\n50             Bulgaria       6 -5.02639603\n51    Former_E._Germany       6 -5.36617200\n52               Poland       6 -4.83913984\n53           Yugoslavia       6 -4.87765104\n54      Byelorussia_SSR       6 -4.89387951\n55            Argentina       3 -3.38164344\n56               Brazil       1 -0.17351090\n57             Columbia       3 -1.72504134\n58               Guyana       1 -0.64024371\n59                 Peru       1  2.88979728\n60            Venezuela       3 -2.71512137\n61              Belgium       6 -5.61006438\n62              Denmark       6 -5.36296636\n63              Germany       6 -5.66618148\n64              Ireland       6 -5.22803491\n65          Netherlands       6 -5.69497185\n66             Portugal       6 -5.54867384\n67               Sweden       6 -5.14801099\n68                 U.K.       6 -5.14080545\n69                Japan       6 -6.74109078\n70               U.S.A.       6 -4.98026088\n71              Bahrain       3 -2.95751794\n72                 Iraq       1  2.86550554\n73               Jordan       1  0.78337204\n74              Lebanon       1 -0.13242340\n75         Saudi_Arabia       1  2.82947028\n76 United_Arab_Emirates       3 -3.60965788\n77             Cambodia       2  6.68714487\n78            Hong_Kong       3 -6.56814921\n79            Indonesia       1  0.59203984\n80             Malaysia       3 -1.69768174\n81                Nepal       2  5.98051592\n82          Philippines       1 -0.11564367\n83            Sri_Lanka       3 -3.86669807\n84              Vietnam       1  0.73637772\n85               Angola       5  8.67464018\n86                Congo       2  4.71698904\n87             Ethiopia       5  9.02400482\n88               Gambia       5  9.16151584\n89                Kenya       2  4.37728422\n90               Malawi       5  9.25868839\n91           Mozambique       5  8.17837256\n92              Nigeria       2  6.80523311\n93              Somalia       5  9.02055241\n94                Sudan       2  6.19772237\n95              Tunisia       1 -0.26827112\n96             Tanzania       2  7.01894686\n97               Zambia       2  5.90158841\n           LD2          LD3\n1   2.23114272  0.086392118\n2  -2.54276395 -0.067491502\n3  -3.62910309  0.149274227\n4  -1.68114304  0.832426535\n5  -0.99643221  0.134219177\n6  -2.45593006  0.032543051\n7  -1.82235340 -0.559232315\n8   1.83697531 -0.440912763\n9   2.45078735  0.333955737\n10  2.72730980 -0.910115449\n11 -0.75565723  0.086830641\n12 -7.45661911 -2.185449656\n13 -1.71396053 -0.111993227\n14 -1.24432254  0.003489983\n15 -1.35732249  0.717192252\n16 -1.36850774  0.675127833\n17 -1.94087447 -0.245927314\n18 -0.77030865  0.612616941\n19 -1.39900851  0.133327537\n20  0.04445534  0.107554431\n21  0.05655923  0.137152032\n22 -1.57150002  3.855195867\n23  1.59572127  0.728082136\n24  1.32996325 -0.726569567\n25  4.20168393 -0.538116615\n26  2.88622987 -2.722021794\n27  1.77493550  1.401386127\n28 -0.58998184  0.808514931\n29  1.37556784  0.521048584\n30  1.07819827  1.747922987\n31 -5.22549147 -1.651932383\n32  1.97934176 -0.052585403\n33  2.56907200  2.904858080\n34  1.56461210 -0.048777986\n35  0.81462641  0.027926012\n36  2.32221009  0.405915880\n37  1.35059836 -2.251690523\n38  1.48375960 -1.484115076\n39 -1.84934413  0.223023990\n40  0.51518412 -0.679939548\n41  2.51546738 -0.550299598\n42  1.57697751  0.620167354\n43  1.81616353  1.811177322\n44 -4.13640327  0.708806858\n45  1.07036311  0.584292394\n46  1.53114576  0.486213522\n47 -0.08614119 -1.461769491\n48 -0.14593127 -1.354022712\n49  1.53174980 -1.155638673\n50 -2.68287368  0.194600531\n51 -3.13019129 -0.146640390\n52 -1.51169554  0.238889303\n53 -0.76403413  0.653220196\n54 -1.07548768  0.052116630\n55  0.23391708  0.049204615\n56  1.80173696  0.887331423\n57  2.37367896  0.116914571\n58  2.01175992  0.650267842\n59  2.70398544  2.617485939\n60  3.09958020 -0.531015134\n61 -2.07122472  0.103010698\n62 -2.80594142 -0.144208119\n63 -2.48058100  0.085615217\n64 -0.94271289 -0.168083173\n65 -0.81402153  0.149795861\n66 -1.34891130  0.526746892\n67 -2.19511746 -0.439370072\n68 -2.45732616 -0.218666957\n69 -0.01816615  0.738650841\n70 -0.19798546 -0.186143629\n71  3.40403941 -0.956027685\n72  3.12008079 -0.806112179\n73  3.21739659 -1.371400507\n74  1.34062918 -0.430471811\n75  3.22903162 -0.605791417\n76  3.10639879  0.361277059\n77 -1.11737674  1.343455301\n78  1.21156621  0.795955999\n79  1.12304477  1.306331526\n80  2.74828222 -1.241072895\n81 -0.24581105  1.734265161\n82  2.00054960 -0.669610455\n83  1.46702228 -0.073210404\n84  1.14664253  0.270008884\n85 -2.62832040  0.398976877\n86 -0.50507133 -1.989873503\n87 -2.80509362  0.132536656\n88 -3.21458937  0.521137723\n89  1.48515306 -1.740964552\n90 -5.46422766 -0.742329819\n91 -1.74864060  1.141424236\n92 -0.35943688 -0.827233974\n93 -2.47121452 -0.274058230\n94 -0.74977705 -0.138778600\n95  2.17721533  0.042802627\n96  0.75977710 -0.855439352\n97  0.55264060 -2.233552693\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## What's in there; making a plot\n\n-   `d` contains country names, cluster memberships and discriminant\n    scores.\n-   Plot `LD1` against `LD2`, colouring points by cluster and labelling\n    by country:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- ggplot(d, aes(\n  x = LD1, y = LD2, colour = factor(cluster),\n  label = country\n)) + geom_point() +\n  geom_text_repel(size = 2, max.overlaps = Inf) + \n  guides(colour = \"none\")\n```\n:::\n\n\n\n\n## The plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-66-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nIt would be better to zoom in on parts of this plot.\n\n## Final example: a hockey league\n\n-   An Ontario hockey league has teams in 21 cities. How can we arrange\n    those teams into 4 geographical divisions?\n\n-   Distance data in spreadsheet.\n\n-   Take out spaces in team names.\n\n-   Save as \"text/csv\".\n\n-   Distances, so back to `hclust`.\n\n## A map\n\n![](map1.png)\n\n## Attempt 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \n  \"http://ritsokiguess.site/datafiles/ontario-road-distances.csv\"\nontario <- read_csv(my_url)\nontario.d <- ontario %>% select(-1) %>% as.dist()\nontario.hc <- hclust(ontario.d, method = \"ward.D\")\n```\n:::\n\n\n\n\n## Plot, with 4 clusters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ontario.hc)\nrect.hclust(ontario.hc, 4)\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-68-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Comments\n\n-   Can't have divisions of 1 team!\n\n-   \"Southern\" divisions way too big!\n\n-   Try splitting into more. I found 7 to be good:\n\n## Seven clusters\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ontario.hc)\nrect.hclust(ontario.hc, 7)\n```\n\n::: {.cell-output-display}\n![](cluster_files/figure-beamer/bCluster-69-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Divisions now\n\n-   I want to put Huntsville and North Bay together with northern teams.\n\n-   I'll put the Eastern teams together. Gives:\n\n-   North: Sault Ste Marie, Sudbury, Huntsville, North Bay\n\n-   East: Brockville, Cornwall, Ottawa, Peterborough, Belleville,\n    Kingston\n\n-   West: Windsor, London, Sarnia\n\n-   Central: Owen Sound, Barrie, Toronto, Niagara Falls, St Catharines,\n    Brantford, Hamilton, Kitchener\n\n-   Getting them same size beyond us!\n\n## Another map\n\n![](map2.png)\n",
    "supporting": [
      "cluster_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}