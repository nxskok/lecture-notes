{
  "hash": "3de20b5fbfa4b045a78b679074f7150d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Durations, intervals, and periods\"\n---\n\n\n\n\n## Packages for this section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nDates and times live in a package called `lubridate`, but this is now part of the `tidyverse`.\n\n## Exact time intervals\n\nWe previously got fractional days (of stays in hospital):\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/hospital.csv\"\nstays <- read_csv(my_url)\nstays %>% mutate(stay_days = (discharge - admit) / ddays(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  admit               discharge           stay_days\n  <dttm>              <dttm>                  <dbl>\n1 1981-12-10 22:00:00 1982-01-03 14:00:00    23.7  \n2 2014-03-07 14:00:00 2014-03-08 09:30:00     0.812\n3 2016-08-31 21:00:00 2016-09-02 17:00:00     1.83 \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\nbut what if we wanted days, hours and minutes?\n\n## Intervals {.smaller}\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = admit %--% discharge)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  admit               discharge           stay                                            \n  <dttm>              <dttm>              <Interval>                                      \n1 1981-12-10 22:00:00 1982-01-03 14:00:00 1981-12-10 22:00:00 UTC--1982-01-03 14:00:00 UTC\n2 2014-03-07 14:00:00 2014-03-08 09:30:00 2014-03-07 14:00:00 UTC--2014-03-08 09:30:00 UTC\n3 2016-08-31 21:00:00 2016-09-02 17:00:00 2016-08-31 21:00:00 UTC--2016-09-02 17:00:00 UTC\n```\n\n\n:::\n:::\n\n\n\n\n\n\n- These are called *intervals*: they have a start point and an end point.\n\n## Periods\n\nTo work out the exact length of an interval, in human units, turn it into a `period`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = as.period(admit %--% discharge))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  admit               discharge           stay         \n  <dttm>              <dttm>              <Period>     \n1 1981-12-10 22:00:00 1982-01-03 14:00:00 23d 16H 0M 0S\n2 2014-03-07 14:00:00 2014-03-08 09:30:00 19H 30M 0S   \n3 2016-08-31 21:00:00 2016-09-02 17:00:00 1d 20H 0M 0S \n```\n\n\n:::\n:::\n\n\n\n\nA period is exact as long as it has a start and an end (accounting for daylight savings, leap years etc).\n\n## Completed days\n\nTake `day` of the periods:\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = as.period(admit %--% discharge)) %>% \n  mutate(days_of_stay = day(stay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  admit               discharge           stay          days_of_stay\n  <dttm>              <dttm>              <Period>             <dbl>\n1 1981-12-10 22:00:00 1982-01-03 14:00:00 23d 16H 0M 0S           23\n2 2014-03-07 14:00:00 2014-03-08 09:30:00 19H 30M 0S               0\n3 2016-08-31 21:00:00 2016-09-02 17:00:00 1d 20H 0M 0S             1\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Completed hours 1/2\n\n- Not quite what you think:\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = as.period(admit %--% discharge)) %>% \n  mutate(hours_of_stay = hour(stay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  admit               discharge           stay          hours_of_stay\n  <dttm>              <dttm>              <Period>              <dbl>\n1 1981-12-10 22:00:00 1982-01-03 14:00:00 23d 16H 0M 0S            16\n2 2014-03-07 14:00:00 2014-03-08 09:30:00 19H 30M 0S               19\n3 2016-08-31 21:00:00 2016-09-02 17:00:00 1d 20H 0M 0S             20\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n- These are completed hours *within* days. \n\n## Completed hours 2/2\n\n- To get total hours, count each day as 24 hours also:\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = as.period(admit %--% discharge)) %>% \n  mutate(hours_of_stay = hour(stay) + 24*day(stay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  admit               discharge           stay          hours_of_stay\n  <dttm>              <dttm>              <Period>              <dbl>\n1 1981-12-10 22:00:00 1982-01-03 14:00:00 23d 16H 0M 0S           568\n2 2014-03-07 14:00:00 2014-03-08 09:30:00 19H 30M 0S               19\n3 2016-08-31 21:00:00 2016-09-02 17:00:00 1d 20H 0M 0S             44\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Durations\n\n- What's the difference between `duration` and `period`?\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstays %>% mutate(stay = as.duration(admit %--% discharge)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 3\n  admit               discharge           stay                  \n  <dttm>              <dttm>              <Duration>            \n1 1981-12-10 22:00:00 1982-01-03 14:00:00 2044800s (~3.38 weeks)\n2 2014-03-07 14:00:00 2014-03-08 09:30:00 70200s (~19.5 hours)  \n3 2016-08-31 21:00:00 2016-09-02 17:00:00 158400s (~1.83 days)  \n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n- A duration is always a number of *seconds*. \n- Also shown is an approx equivalent on a more human scale (calculated from seconds).\n\n## Sometimes it matters\n\n- Days and hours are always the same length (as a number of seconds).\n- Months and years are not always the same length:\n  - months have different numbers of days\n  - years can be leap years or not\n  - the actual length of 2 months depends *which* 2 months:\n  \n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntribble(\n  ~start, ~end,\n  ymd(\"2020-01-15\"), ymd(\"2020-03-15\"),\n  ymd(\"2020-07-15\"), ymd(\"2020-09-15\")\n) %>% mutate(period = as.period(start %--% end)) %>% \n  mutate(duration = as.duration(start %--% end))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 x 4\n  start      end        period         duration              \n  <date>     <date>     <Period>       <Duration>            \n1 2020-01-15 2020-03-15 2m 0d 0H 0M 0S 5184000s (~8.57 weeks)\n2 2020-07-15 2020-09-15 2m 0d 0H 0M 0S 5356800s (~8.86 weeks)\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Comments\n\n- Both periods are exactly two months\n- but they have a different duration in seconds\n- the first two-month period is shorter because it contains the short month February\n- the second two-month period is longer because both July and August have 31 days.\n\n## Manchester United\n\nSometime in December 2019 or January 2020, I downloaded some information about the players that were then in the squad of the famous Manchester United Football (soccer) Club. We are going to use the players' ages (as given) to figure out exactly when the download happened.\n  \n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/manu.csv\"\nread_csv(my_url) %>% \n  select(name, date_of_birth, age) -> man_united\n```\n:::\n\n\n\n\n\\normalsize\n\n## The data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nman_united\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 x 3\n   name                         date_of_birth      age\n   <chr>                        <chr>            <dbl>\n 1 David de Gea Quintana        7 November 1990     29\n 2 Lee Grant                    27 January 1983     36\n 3 Sergio Germán Romero         22 February 1987    32\n 4 Victor Nilsson Lindelöf      17 July 1994        25\n 5 Eric Bertrand  Bailly        12 April 1994       25\n 6 Phil Jones                   21 February 1992    27\n 7 Harry Maguire                5 March 1993        26\n 8 Faustino Marcos Alberto Rojo 20 March 1990       29\n 9 Ashley Young                 9 July 1985         34\n10 José Diogo Dalot Teixeira    18 March 1999       20\n# i 19 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## Ages\n\n- A player's age is the number of *completed* years since their birth\n- This suggests:\n  - guessing a download date\n  - working out time since birth as *period*\n  - extracting number of years\n  \n- After that, see if our calculations of age match actual ages\n\n\n## Guess download date and work out ages\n\nGuess January 10, 2020 as download date (just to pick a date):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguess <- ymd(\"2020-01-10\")\nman_united %>% \n  mutate(dob = dmy(date_of_birth)) %>% \n  mutate(age_period = as.period(dob %--% guess)) %>% \n  mutate(age_years = year(age_period)) -> d\n```\n:::\n\n\n\n\n## Results (just the ages)\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% select(name, age, age_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 x 3\n   name                           age age_years\n   <chr>                        <dbl>     <dbl>\n 1 David de Gea Quintana           29        29\n 2 Lee Grant                       36        36\n 3 Sergio Germán Romero            32        32\n 4 Victor Nilsson Lindelöf         25        25\n 5 Eric Bertrand  Bailly           25        25\n 6 Phil Jones                      27        27\n 7 Harry Maguire                   26        26\n 8 Faustino Marcos Alberto Rojo    29        29\n 9 Ashley Young                    34        34\n10 José Diogo Dalot Teixeira       20        20\n# i 19 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Which ones are different?\n\n\\small\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% filter(age != age_years) %>% \n  select(name, date_of_birth, age, age_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 x 4\n  name                       date_of_birth      age age_years\n  <chr>                      <chr>            <dbl>     <dbl>\n1 Timothy Evans Fosu-Mensah  2 January 1998      21        22\n2 Jesse Lingard              15 December 1992    26        27\n3 Andreas Hoelgebaum Pereira 1 January 1996      23        24\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n- these three players were calculated wrong: we got one year too many.\n- Our guessed date, January 10, was too *late*.\n- These three players had a birthday since the actual download date\n- actual download date must have been before Dec 15.\n\n## Try an earlier date\n\n- say Dec 5:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nguess <- ymd(\"2019-12-05\")\nman_united %>% \n  mutate(dob = dmy(date_of_birth)) %>% \n  mutate(age_period = as.period(dob %--% guess)) %>% \n  mutate(age_years = year(age_period)) %>% \n  filter(age != age_years) %>% \n  select(name, date_of_birth, age, age_years) -> d2\n```\n:::\n\n\n\n\n## Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 x 4\n  name            date_of_birth     age age_years\n  <chr>           <chr>           <dbl>     <dbl>\n1 Scott McTominay 8 December 1996    23        22\n```\n\n\n:::\n:::\n\n\n\n\n- Dec 5 was too early for the download date\n- must have been later than Dec 8 (to get McTominay's age right)\n- so must have been between Dec 8 and Dec 15 (Lingard's birthday)\n- Actually I downloaded the data on Dec 10.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}