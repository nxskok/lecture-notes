{
  "hash": "064b21fb303368dfc275701a07f6e48f",
  "result": {
    "engine": "knitr",
    "markdown": " ---\ntitle: \"Reading data files\"\neditor: \n  markdown: \n    wrap: 72\n\n---\n\n## Introduction\n\n-   First thing we need to do is to read in data, so that we can use our\n    software to analyze.\n-   Consider these:\n    -   Spreadsheet data saved as `.csv` file.\n    -   \"Delimited\" data such as values separated by spaces.\n    -   Actual Excel spreadsheets.\n\n## Packages for this section\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## A spreadsheet\n\n![](spreadsheet.png)\n\n## Save as `.csv`\n\n-   `.csv` or \"comma-separated values\" is a way of turning spreadsheet\n    values into plain text.\n-   Easy to read into R\n-   but does not preserve formulas. (This is a reason for doing all your\n    calculations in your statistical software, and only having data in\n    your spreadsheet.)\n-   File, Save As Text CSV (or similar).\n-   used name `test1.csv`.\n\n## The `.csv` file\n\n```         \nid,x,y,group\np1,10,21,upper\np2,11,20,lower\np3,13,25,upper\np4,15,27,lower\np5,16,30,upper\np6,17,31,lower\n```\n\nTo read this in:\n\n-   Fire up R Studio at `r.datatools.utoronto.ca`\n-   Upload this .csv file. (Bottom right, next to New Folder, Upload.)\n    Click Choose File, find the file, click Open. Click OK. See the file\n    appear bottom right.\n\n## Make a new Quarto document\n\n-   File, New File, Quarto Document\n-   ...and get rid of the template document (leaving the first four\n    lines).\n-   Make a code chunk and in it put this. Run it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n## Reading in the file\n\n-   Use `read_csv` with the name of the file, in quotes. Save the\n    read-in file in something, here called `mydata`. Make a new code\n    chunk for this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read_csv(\"test1.csv\")\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  id        x     y group\n  <chr> <dbl> <dbl> <chr>\n1 p1       10    21 upper\n2 p2       11    20 lower\n3 p3       13    25 upper\n4 p4       15    27 lower\n5 p5       16    30 upper\n6 p6       17    31 lower\n```\n\n\n:::\n:::\n\n\n## More on the above\n\n-   read_csv guesses what kind of thing is in each column. Here it\n    correctly guesses that:\n    -   id and group are text (categorical variables). id is actually\n        \"identifier variable\": identifies individuals.\n    -   x and y are \"double\": numbers that might have a decimal point in\n        them.\n\n## R Studio on your own computer\n\n-   Put the .csv file in the same folder as your project. Then read it\n    in as above like `read_csv(\"test1.csv\")`.\n-   Or, use\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# f <- file.choose()\nf\n```\n:::\n\n\n\nwhich brings up a file selector (as if you were going to find a file to\nload or save it). Find your `.csv` file, the address of which will be\nsaved in `f`, and then:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata <- read_csv(f)\n```\n:::\n\n\n\n-   When you have selected the file, comment out the `file.choose` line\n    by putting a \\# on the front of it. That will save you having to\n    find the file again by mistake. (Keyboard shortcut: go to the line,\n    type control-shift-C or Mac equivalent with Cmd.)\n\n## Looking at what we read in\n\n-   Again, type the name of the thing to display it:\n\n\\scriptsize\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  id        x     y group\n  <chr> <dbl> <dbl> <chr>\n1 p1       10    21 upper\n2 p2       11    20 lower\n3 p3       13    25 upper\n4 p4       15    27 lower\n5 p5       16    30 upper\n6 p6       17    31 lower\n```\n\n\n:::\n:::\n\n\n\n\\normalsize\n\n-   This is a \"tibble\" or data frame, the standard way of storing a data\n    set in R.\n-   Tibbles print as much as will display on the screen. If there are\n    more rows or columns, it will say so.\n-   You might see navigation keys to display more rows or columns (if\n    there are more).\n\n## `View`-ing your data frame\n\n-   Another way to examine your data frame is to View it, like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(mydata)\n```\n:::\n\n\n\n- ...or find your data frame in the Global Environment top right and click it. \n- This pops up a \"data frame viewer\" top left:\n\n![](viewview.png){height=\"150px\"}\n\n## This View\n\n-   Read-only: cannot edit data\n-   Can display data satisfying conditions: click on Filter, then:\n    -   for a categorical variable, type name of category you want\n    -   for a quantitative variable, use slider to describe values you\n        want.\n-   Can sort a column into ascending or descending order (click little\n    arrows next to column name).\n-   Clicking the symbol with arrow on it left of Filter \"pops out\" View\n    into separate (bigger) window.\n\n## Summarizing what we read in\n\n-   It is always a good idea to look at your data after you have read it\n    in, to make sure you have believable numbers (and the right number\n    of individuals and variables).\n-   Quick check for errors: these often show up as values too high or\n    too low, so the min and/or max will be unreasonable.\n-   Five-number summary:\n\n\\footnotesize\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      id                  x               y            group          \n Length:6           Min.   :10.00   Min.   :20.00   Length:6          \n Class :character   1st Qu.:11.50   1st Qu.:22.00   Class :character  \n Mode  :character   Median :14.00   Median :26.00   Mode  :character  \n                    Mean   :13.67   Mean   :25.67                     \n                    3rd Qu.:15.75   3rd Qu.:29.25                     \n                    Max.   :17.00   Max.   :31.00                     \n```\n\n\n:::\n:::\n\n\n\n\\normalsize\n\n-   Quantitative, five-number summary plus mean.\n-   Categorical, how many rows.\n\n## Reading from a URL\n\n-   Any data file on the Web can be read directly.\n-   [Example data link:](http://ritsokiguess.site/datafiles/global.csv)\n-   Use URL instead of filename.\n-   I like to save the URL in a variable first (because URLs tend to be\n    long), and then put that variable in the `read_` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/global.csv\"\nmy_url\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"http://ritsokiguess.site/datafiles/global.csv\"\n```\n\n\n:::\n\n```{.r .cell-code}\nglobal <- read_csv(my_url)\n```\n:::\n\n\n\n## The data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 x 3\n   warehouse  size  cost\n   <chr>     <dbl> <dbl>\n 1 A           225 12.0 \n 2 B           350 14.1 \n 3 A           150  8.93\n 4 A           200 11.0 \n 5 A           175 10.0 \n 6 A           180 10.1 \n 7 B           325 13.8 \n 8 B           290 13.3 \n 9 B           400 15   \n10 A           125  7.97\n```\n\n\n:::\n:::\n\n\n\n## Space-delimited files\n\n-   Another common format for data is a text file with the values\n    separated by spaces. Top of some other data:\n\n\\scriptsize\n\n```         \ncup tempdiff            \nStarbucks 13            \nStarbucks 7        \nStarbucks 7        \nStarbucks 17.5     \nStarbucks 10       \nStarbucks 15.5     \nStarbucks 6        \nStarbucks 6        \nSIGG 12            \nSIGG 16            \nSIGG 9             \nSIGG 23            \nSIGG 11            \nSIGG 20.5          \nSIGG 12.5      \nSIGG 20.5      \nSIGG 24.5      \nCUPPS 6    \nCUPPS 6    \n```\n\n\\normalsize\n\n## Reading the coffee data\n\n-   This file was on my computer so I uploaded it to\n    `r.datatools.utoronto.ca` first.\n-   This time, `read_delim`, and we also have to say what the thing is\n    separating the values:\n\n\\footnotesize\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee <- read_delim(\"coffee.txt\", \" \")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 32 Columns: 2\n-- Column specification --------------------------------------------------------\nDelimiter: \" \"\nchr (1): cup\ndbl (1): tempdiff\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\\normalsize\n\n-   Name of the cup, text, and tempdiff, a decimal number.\n\n## Looking at the values\n\n\\footnotesize\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffee\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 x 2\n   cup       tempdiff\n   <chr>        <dbl>\n 1 Starbucks     13  \n 2 Starbucks      7  \n 3 Starbucks      7  \n 4 Starbucks     17.5\n 5 Starbucks     10  \n 6 Starbucks     15.5\n 7 Starbucks      6  \n 8 Starbucks      6  \n 9 SIGG          12  \n10 SIGG          16  \n# i 22 more rows\n```\n\n\n:::\n:::\n\n\n\n\\normalsize\n\nThese were four brands of travel mug (in `cup`), \nand for each, how much\nthe temperature of the coffee in the mug decreased over 30 minutes.\n\n## Reading from the Web; the soap data\n\n-   Use the URL in place of the filename.\n-   Save the URL in a variable first:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_url <- \"http://ritsokiguess.site/datafiles/soap.txt\"\nsoap <- read_delim(my_url, \" \")\n```\n:::\n\n\n\n## The soap data (some)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsoap\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 27 x 4\n    case scrap speed line \n   <dbl> <dbl> <dbl> <chr>\n 1     1   218   100 a    \n 2     2   248   125 a    \n 3     3   360   220 a    \n 4     4   351   205 a    \n 5     5   470   300 a    \n 6     6   394   255 a    \n 7     7   332   225 a    \n 8     8   321   175 a    \n 9     9   410   270 a    \n10    10   260   170 a    \n# i 17 more rows\n```\n\n\n:::\n:::\n\n\n\n## Data aligned in columns\n\n-   Sometimes you see data aligned in columns, thus:\n\n![](Screenshot_2019-04-24_20-16-24.png){height=\"200px\"}\n\n-   `read_delim` will not work: values separated by more than one space.\n-   The number of spaces between values is not constant, because there\n    is one fewer space before the 10.\n-   `read_table` works for this.\n\n## Reading in column-aligned data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrugs <- read_table(\"migraine.txt\")\ndrugs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 x 3\n  DrugA DrugB DrugC\n  <dbl> <dbl> <dbl>\n1     4     6     6\n2     5     8     7\n3     4     4     6\n4     3     5     6\n5     2     4     7\n6     4     6     5\n7     3     5     6\n8     4    10     5\n9     4     6     5\n```\n\n\n:::\n:::\n\n\n\n## Reading an Excel sheet directly\n\n-   Here is [my spreadsheet](test2.xlsx) from before, but tarted up a\n    bit:\n\n![](excel.png){height=\"200px\"}\n\n-   It is now a workbook with a second sheet called \"notes\" (that we\n    don't want).\n-   Install package `readxl` first.\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Reading it in\n\n-   Read into R, saying that we only want the sheet \"data\". Upload\n    spreadsheet first.\n-   Excel spreadsheets must be \"local\": cannot read one in from a URL.\n\n\\small\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl) # install first (once) with install.packages\nmydata2 <- read_excel(\"test2.xlsx\", sheet = \"data\")\nmydata2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 4\n  id        x     y group\n  <chr> <dbl> <dbl> <chr>\n1 p1       10    21 upper\n2 p2       11    20 lower\n3 p3       13    25 upper\n4 p4       15    27 lower\n5 p5       16    30 upper\n6 p6       17    31 lower\n```\n\n\n:::\n:::\n\n\n\n\\normalsize",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}