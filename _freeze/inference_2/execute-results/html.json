{
  "hash": "ea27e02302568994c465ec5d3aa38182",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistical Inference: Power\"\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n## Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n## Errors in testing\n\nWhat can happen:\n\n|                | Decision          |                 |\n|:---------------|:------------------|:----------------|\n| **Truth**      | **Do not reject** | **Reject null** |\n| **Null true**  | Correct           | Type I error    |\n| **Null false** | Type II error     | Correct         |\n\nTension between truth and decision about truth (imperfect).\n\n-   Prob. of type I error denoted $\\alpha$. Usually fix $\\alpha$, eg.\n    $\\alpha = 0.05$.\n-   Prob. of type II error denoted $\\beta$. Determined by the planned\n    experiment. Low $\\beta$ good.\n-   Prob. of not making type II error called **power** (= $1 - \\beta$).\n    *High* power good.\n\n## Power\n\n-   Suppose $H_0 : \\theta = 10$, $H_a : \\theta \\ne 10$ for some\n    parameter $\\theta$.\n-   Suppose $H_0$ wrong. What does that say about $\\theta$?\n-   Not much. Could have $\\theta = 11$ or $\\theta = 8$ or\n    $\\theta = 496$. In each case, $H_0$ wrong.\n-   How likely a type II error is depends on what $\\theta$ is:\n    -   If $\\theta = 496$, should be able to reject $H_0 : \\theta = 10$\n        even for small sample, so $\\beta$ should be small (power large).\n    -   If $\\theta = 11$, might have hard time rejecting $H_0$ even with\n        large sample, so $\\beta$ would be larger (power smaller).\n-   Power depends on true parameter value, and on sample size.\n-   So we play \"what if\": \"if $\\theta$ were 11 (or 8 or 496), what would\n    power be?\".\n\n## Figuring out power\n\n-   Time to figure out power is before you collect any data, as part of\n    planning process.\n-   Need to have idea of what kind of departure from null hypothesis of\n    interest to you, eg. average improvement of 5 points on reading test\n    scores. (Subject-matter decision, not statistical one.)\n-   Then, either:\n    -   \"I have this big a sample and this big a departure I want to\n        detect. What is my power for detecting it?\"\n    -   \"I want to detect this big a departure with this much power. How\n        big a sample size do I need?\"\n\n## How to understand/estimate power?\n\n-   Suppose we test $H_0 : \\mu = 10$ against $H_a : \\mu \\ne 10$, where\n    $\\mu$ is population mean.\n-   Suppose in actual fact, $\\mu = 8$, so $H_0$ is wrong. We want to\n    reject it. How likely is that to happen?\n-   Need population SD (take $\\sigma = 4$) and sample size (take\n    $n = 15$). In practice, get $\\sigma$ from pilot/previous study, and\n    take the $n$ we plan to use.\n-   Idea: draw a random sample from the true distribution, test whether\n    its mean is 10 or not.\n-   Repeat previous step \"many\" times.\n-   \"Simulation\".\n\n## Making it go\n\n-   Random sample of 15 normal observations with mean 8 and SD 4:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- rnorm(15, 8, 4)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 14.487469  5.014611  6.924277  5.201860  8.852952\n [6] 10.835874  3.686684 11.165242  8.016188 12.383518\n[11]  1.378099  3.172503 13.074996 11.353573  5.015575\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n-   Test whether `x` from population with mean 10 or not (over):\n\n## ...continued\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(x, mu = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tOne Sample t-test\n\ndata:  x\nt = -1.8767, df = 14, p-value = 0.08157\nalternative hypothesis: true mean is not equal to 10\n95 percent confidence interval:\n  5.794735 10.280387\nsample estimates:\nmean of x \n 8.037561 \n```\n\n\n:::\n:::\n\n\n\n\n-   Fail to reject the mean being 10 (a Type II error).\n\n## or get just P-value\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nans <- t.test(x, mu = 10)\nans$p.value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0815652\n```\n\n\n:::\n:::\n\n\n\n\n## How I knew it was called that\n\n\\footnotesize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 10\n $ statistic  : Named num -1.88\n  ..- attr(*, \"names\")= chr \"t\"\n $ parameter  : Named num 14\n  ..- attr(*, \"names\")= chr \"df\"\n $ p.value    : num 0.0816\n $ conf.int   : num [1:2] 5.79 10.28\n  ..- attr(*, \"conf.level\")= num 0.95\n $ estimate   : Named num 8.04\n  ..- attr(*, \"names\")= chr \"mean of x\"\n $ null.value : Named num 10\n  ..- attr(*, \"names\")= chr \"mean\"\n $ stderr     : num 1.05\n $ alternative: chr \"two.sided\"\n $ method     : chr \"One Sample t-test\"\n $ data.name  : chr \"x\"\n - attr(*, \"class\")= chr \"htest\"\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Run this lots of times\n\n-   without a loop!\n-   use `rowwise` to work one random sample at a time\n-   draw random samples from the truth\n-   test that $\\mu = 10$\n-   get P-value\n-   Count up how many of the P-values are 0.05 or less.\n\n## In code\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(sim = 1:1000) %>% \n  rowwise() %>% \n  mutate(my_sample = list(rnorm(15, 8, 4))) %>% \n  mutate(t_test = list(t.test(my_sample, mu = 10))) %>% \n  mutate(p_val = t_test$p.value) %>% \n  count(p_val <= 0.05)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"p_val <= 0.05\"],\"name\":[1],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"FALSE\",\"2\":\"578\"},{\"1\":\"TRUE\",\"2\":\"422\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\nWe correctly rejected 422 times out of 1000, so the estimated power is\n0.422.\n\n## Aside: Try again with bigger sample\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(sim = 1:1000) %>% \n  rowwise() %>% \n  mutate(my_sample = list(rnorm(40, 8, 4))) %>% \n  mutate(t_test = list(t.test(my_sample, mu = 10))) %>% \n  mutate(p_val = t_test$p.value) %>% \n  count(p_val <= 0.05)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"p_val <= 0.05\"],\"name\":[1],\"type\":[\"lgl\"],\"align\":[\"right\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"FALSE\",\"2\":\"119\"},{\"1\":\"TRUE\",\"2\":\"881\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Calculating power\n\n-   Simulation approach very flexible: will work for any test. But\n    answer different each time because of randomness.\n-   In some cases, for example 1-sample and 2-sample t-tests, power can\n    be calculated.\n-   `power.t.test`. Input `delta` is difference between null and true\n    mean:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower.t.test(n = 15, delta = 10-8, sd = 4, \n             type = \"one.sample\")\n```\n:::\n\n\n\n\n## Results\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower.t.test(n = 15, delta = 10-8, sd = 4, \n             type = \"one.sample\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 15\n          delta = 2\n             sd = 4\n      sig.level = 0.05\n          power = 0.4378466\n    alternative = two.sided\n```\n\n\n:::\n:::\n\n\n\n\n\n## Comparison of results\n\n| Method             | Power  |\n|:-------------------|:-------|\n| Simulation         | 0.422  |\n| **`power.t.test`** | 0.4378 |\n\n-   Simulation power is similar to calculated power; to get more\n    accurate value, repeat more times (eg. 10,000 instead of 1,000),\n    which takes longer.\n-   CI for power based on simulation approx. $0.42 \\pm 0.03$.\n-   With this small a sample size, the power is not great. With a bigger\n    sample, the sample mean should be closer to 8 most of the time, so\n    would reject $H_0 : \\mu = 10$ more often.\n\n## Calculating required sample size\n\n-   Often, when planning a study, we do not have a particular sample\n    size in mind. Rather, we want to know how big a sample to take. This\n    can be done by asking how big a sample is needed to achieve a\n    certain power.\n-   The simulation approach does not work naturally with this, since you\n    have to supply a sample size.\n    -   For that, you try different sample sizes until you get power\n        close to what you want.\n-   For the power-calculation method, you supply a value for the power,\n    but leave the sample size missing.\n-   Re-use the same problem: $H_0 : \\mu = 10$ against 2-sided\n    alternative, true $\\mu = 8$, $\\sigma = 4$, but now aim for power\n    0.80.\n\n## Using power.t.test\n\n-   No `n=`, replaced by a `power=`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower.t.test(power=0.80, delta=10-8, sd=4, type=\"one.sample\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 33.3672\n          delta = 2\n             sd = 4\n      sig.level = 0.05\n          power = 0.8\n    alternative = two.sided\n```\n\n\n:::\n:::\n\n\n\n\n\n-   Sample size must be a whole number, so round up to 34 (to get at\n    least as much power as you want).\n\n## One-sided test\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower.t.test(power=0.80, delta=10-8, sd=4, \n             type=\"one.sample\", alternative = \"one.sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 26.13751\n          delta = 2\n             sd = 4\n      sig.level = 0.05\n          power = 0.8\n    alternative = one.sided\n```\n\n\n:::\n:::\n\n\n\n\n## Power curves\n\n-   Rather than calculating power for one sample size, or sample size\n    for one power, might want a picture of relationship between sample\n    size and power.\n-   Or, likewise, picture of relationship between difference between\n    true and null-hypothesis means and power.\n-   Called power curve.\n-   Build and plot it yourself.\n\n## Building it 1/2\n\n-   If you feed `power.t.test` a collection (\"vector\") of values, it will\n    do calculation for each one.\n-   Do power for variety of sample sizes, from 10 to 100 in steps of 10:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nns <- seq(10,100,10)\nns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]  10  20  30  40  50  60  70  80  90 100\n```\n\n\n:::\n:::\n\n\n\n\n## Building it 2/2\n\n\\small\n\n-   Calculate powers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nans<- power.t.test(n=ns, delta=10-8, sd=4, type=\"one.sample\")\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     One-sample t test power calculation \n\n              n = 10, 20, 30, 40, 50, 60, 70, 80, 90, 100\n          delta = 2\n             sd = 4\n      sig.level = 0.05\n          power = 0.2928286, 0.5644829, 0.7539627, 0.8693979, 0.9338976, 0.9677886, 0.9847848, 0.9929987, 0.9968496, 0.9986097\n    alternative = two.sided\n```\n\n\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Just the power\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nans$power\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.2928286 0.5644829 0.7539627 0.8693979 0.9338976\n [6] 0.9677886 0.9847848 0.9929987 0.9968496 0.9986097\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Building a plot (1/2)\n\n-   Make a data frame out of the values to plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(n=ns, power=ans$power)\nd\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"n\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"power\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"10\",\"2\":\"0.2928286\"},{\"1\":\"20\",\"2\":\"0.5644829\"},{\"1\":\"30\",\"2\":\"0.7539627\"},{\"1\":\"40\",\"2\":\"0.8693979\"},{\"1\":\"50\",\"2\":\"0.9338976\"},{\"1\":\"60\",\"2\":\"0.9677886\"},{\"1\":\"70\",\"2\":\"0.9847848\"},{\"1\":\"80\",\"2\":\"0.9929987\"},{\"1\":\"90\",\"2\":\"0.9968496\"},{\"1\":\"100\",\"2\":\"0.9986097\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Building a plot (2/2)\n\n-   Plot these as points joined by lines, and add horizontal line at 1\n    (maximum power):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <-   ggplot(d, aes(x = n, y = power)) + geom_point() + \n  geom_line() + \n  geom_hline(yintercept = 1, linetype = \"dashed\")\n```\n:::\n\n\n\n\n## The power curve\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng\n```\n\n::: {.cell-output-display}\n![](inference_2_files/figure-revealjs/inference-2-R-13-1.png){width=960}\n:::\n:::\n\n\n\n\n## Another way to do it:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(n=ns) %>% rowwise() %>%\n  mutate(power_output = \n           list(power.t.test(n = n, delta = 10-8, sd = 4, \n                             type = \"one.sample\"))) %>% \n  mutate(power = power_output$power) %>% \n  ggplot(aes(x=n, y=power)) + geom_point() + geom_line() +\n    geom_hline(yintercept=1, linetype=\"dashed\") -> g2\n```\n:::\n\n\n\n\n## The power curve done the other way\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng2\n```\n\n::: {.cell-output-display}\n![](inference_2_files/figure-revealjs/inference-2-R-15-1.png){width=960}\n:::\n:::\n\n\n\n\n## Power curves for means\n\n-   Can also investigate power as it depends on what the true mean is\n    (the farther from null mean 10, the higher the power will be).\n-   Investigate for two different sample sizes, 15 and 30.\n-   First make all combos of mean and sample size:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans <- seq(6,10,0.5)\nmeans\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6.0  6.5  7.0  7.5  8.0  8.5  9.0  9.5 10.0\n```\n\n\n:::\n\n```{.r .cell-code}\nns <- c(15,30)\nns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15 30\n```\n\n\n:::\n\n```{.r .cell-code}\ncombos <- crossing(mean=means, n=ns)\n```\n:::\n\n\n\n\n## The combos\n\n\\scriptsize\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombos\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mean\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"6.0\",\"2\":\"15\"},{\"1\":\"6.0\",\"2\":\"30\"},{\"1\":\"6.5\",\"2\":\"15\"},{\"1\":\"6.5\",\"2\":\"30\"},{\"1\":\"7.0\",\"2\":\"15\"},{\"1\":\"7.0\",\"2\":\"30\"},{\"1\":\"7.5\",\"2\":\"15\"},{\"1\":\"7.5\",\"2\":\"30\"},{\"1\":\"8.0\",\"2\":\"15\"},{\"1\":\"8.0\",\"2\":\"30\"},{\"1\":\"8.5\",\"2\":\"15\"},{\"1\":\"8.5\",\"2\":\"30\"},{\"1\":\"9.0\",\"2\":\"15\"},{\"1\":\"9.0\",\"2\":\"30\"},{\"1\":\"9.5\",\"2\":\"15\"},{\"1\":\"9.5\",\"2\":\"30\"},{\"1\":\"10.0\",\"2\":\"15\"},{\"1\":\"10.0\",\"2\":\"30\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\\normalsize\n\n## Calculate and plot\n\n-   Calculate the powers, carefully:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nans <- with(combos, power.t.test(n=n, delta=10-mean, sd=4, \n                              type=\"one.sample\"))\nans$power\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.94908647 0.99956360 0.88277128 0.99619287\n [5] 0.77070660 0.97770385 0.61513033 0.91115700\n [9] 0.43784659 0.75396272 0.27216777 0.51028173\n[13] 0.14530058 0.26245348 0.06577280 0.09719303\n[17] 0.02500000 0.02500000\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## Make a data frame to plot\n\npulling things from the right places:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- tibble(n=factor(combos$n), mean=combos$mean, \n            power=ans$power)\nd\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"n\"],\"name\":[1],\"type\":[\"fct\"],\"align\":[\"left\"]},{\"label\":[\"mean\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"power\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"15\",\"2\":\"6.0\",\"3\":\"0.94908647\"},{\"1\":\"30\",\"2\":\"6.0\",\"3\":\"0.99956360\"},{\"1\":\"15\",\"2\":\"6.5\",\"3\":\"0.88277128\"},{\"1\":\"30\",\"2\":\"6.5\",\"3\":\"0.99619287\"},{\"1\":\"15\",\"2\":\"7.0\",\"3\":\"0.77070660\"},{\"1\":\"30\",\"2\":\"7.0\",\"3\":\"0.97770385\"},{\"1\":\"15\",\"2\":\"7.5\",\"3\":\"0.61513033\"},{\"1\":\"30\",\"2\":\"7.5\",\"3\":\"0.91115700\"},{\"1\":\"15\",\"2\":\"8.0\",\"3\":\"0.43784659\"},{\"1\":\"30\",\"2\":\"8.0\",\"3\":\"0.75396272\"},{\"1\":\"15\",\"2\":\"8.5\",\"3\":\"0.27216777\"},{\"1\":\"30\",\"2\":\"8.5\",\"3\":\"0.51028173\"},{\"1\":\"15\",\"2\":\"9.0\",\"3\":\"0.14530058\"},{\"1\":\"30\",\"2\":\"9.0\",\"3\":\"0.26245348\"},{\"1\":\"15\",\"2\":\"9.5\",\"3\":\"0.06577280\"},{\"1\":\"30\",\"2\":\"9.5\",\"3\":\"0.09719303\"},{\"1\":\"15\",\"2\":\"10.0\",\"3\":\"0.02500000\"},{\"1\":\"30\",\"2\":\"10.0\",\"3\":\"0.02500000\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## then make the plot:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng  <-  ggplot(d, aes(x = mean, y = power, colour = n)) +\n  geom_point() + geom_line() +\n  geom_hline(yintercept = 1, linetype = \"dashed\") +\n  geom_vline(xintercept = 10, linetype = \"dotted\")\n```\n:::\n\n\n\n\n## The power curves\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng\n```\n\n::: {.cell-output-display}\n![](inference_2_files/figure-revealjs/inference-2-R-22-1.png){width=960}\n:::\n:::\n\n\n\n\n## Comments\n\n-   When `mean=10`, that is, the true mean equals the null mean, $H_0$\n    is actually true, and the probability of rejecting it then is\n    $\\alpha = 0.05$.\n-   As the null gets more wrong (mean decreases), it becomes easier to\n    correctly reject it.\n-   The blue power curve is above the red one for any mean \\< 10,\n    meaning that no matter how wrong $H_0$ is, you always have a greater\n    chance of correctly rejecting it with a larger sample size.\n-   Previously, we had $H_0 : \\mu = 10$ and a true $\\mu = 8$, so a mean\n    of 8 produces power 0.42 and 0.80 as shown on the graph.\n-   With $n = 30$, a true mean that is less than about 7 is almost\n    certain to be correctly rejected. (With $n = 15$, the true mean\n    needs to be less than 6.)\n\n## Two-sample power\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n-   For kids learning to read, had sample sizes of 22 (approx) in each\n    group\n-   and these group SDs:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkids %>% group_by(group) %>% \n  summarize(n=n(), s=sd(score))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"group\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"n\"],\"name\":[2],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"s\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"c\",\"2\":\"23\",\"3\":\"17.14873\"},{\"1\":\"t\",\"2\":\"21\",\"3\":\"11.00736\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n## Setting up\n\n-   suppose a 5-point improvement in reading score was considered\n    important (on this scale)\n-   in a 2-sample test, nul(difference of) mean is zero, so `delta` is\n    true difference in means\n-   what is power for these sample sizes, and what sample size would be\n    needed to get power up to 0.80?\n-   SD in both groups has to be same in `power.t.test`, so take as 14.\n\n## Calculating power for sample size 22 (per group)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower.t.test(n=22, delta=5, sd=14, type=\"two.sample\", \n             alternative=\"one.sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     Two-sample t test power calculation \n\n              n = 22\n          delta = 5\n             sd = 14\n      sig.level = 0.05\n          power = 0.3158199\n    alternative = one.sided\n\nNOTE: n is number in *each* group\n```\n\n\n:::\n:::\n\n\n\n\n## sample size for power 0.8\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npower.t.test(power=0.80, delta=5, sd=14, type=\"two.sample\", \n             alternative=\"one.sided\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n     Two-sample t test power calculation \n\n              n = 97.62598\n          delta = 5\n             sd = 14\n      sig.level = 0.05\n          power = 0.8\n    alternative = one.sided\n\nNOTE: n is number in *each* group\n```\n\n\n:::\n:::\n\n\n\n\n## Comments\n\n-   The power for the sample sizes we have is very small (to detect a\n    5-point increase).\n-   To get power 0.80, we need 98 kids in *each* group!\n",
    "supporting": [
      "inference_2_files/figure-revealjs"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"inference_2_files/libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"inference_2_files/libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}